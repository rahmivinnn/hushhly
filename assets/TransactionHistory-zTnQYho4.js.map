{"version":3,"file":"TransactionHistory-zTnQYho4.js","sources":["../../src/components/ui/balance-display.tsx","../../src/components/ui/header-balance.tsx","../../src/pages/TransactionHistory.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { balanceService } from '@/services/balanceService';\r\nimport { useAuthSimple } from '@/hooks/useAuthSimple';\r\nimport { Button } from './button';\r\nimport { toast } from 'sonner';\r\n\r\ninterface BalanceDisplayProps {\r\n  showAddFunds?: boolean;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport const BalanceDisplay: React.FC<BalanceDisplayProps> = ({\r\n  showAddFunds = false, // Default to false to hide Add Funds button\r\n  compact = false,\r\n  className = ''\r\n}) => {\r\n  const { user } = useAuthSimple();\r\n  const [balance, setBalance] = useState(0);\r\n  const [currency, setCurrency] = useState('USD');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // Get consistent temporary user ID\r\n  const getTempUserId = () => {\r\n    // Check if we already have a temporary ID in localStorage\r\n    let tempId = localStorage.getItem('temp_user_id');\r\n\r\n    // If not, create a new one and store it\r\n    if (!tempId) {\r\n      tempId = `temp_user_${Date.now()}`;\r\n      localStorage.setItem('temp_user_id', tempId);\r\n    }\r\n\r\n    return tempId;\r\n  };\r\n\r\n  // Get current user ID (real or temporary)\r\n  const getCurrentUserId = () => {\r\n    return user?.id || getTempUserId();\r\n  };\r\n\r\n  // Load user balance\r\n  useEffect(() => {\r\n    const loadBalance = () => {\r\n      try {\r\n        const userId = getCurrentUserId();\r\n        const userBalance = balanceService.getUserBalance(userId);\r\n        setBalance(userBalance.balance);\r\n        setCurrency(userBalance.currency);\r\n      } catch (error) {\r\n        console.error('Error loading balance:', error);\r\n        toast.error('Failed to load balance');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBalance();\r\n\r\n    // Refresh balance every 1 second for more real-time updates\r\n    const intervalId = setInterval(loadBalance, 1000);\r\n\r\n    // Listen for custom event for balance updates\r\n    const handleBalanceUpdate = () => loadBalance();\r\n    window.addEventListener('balance-updated', handleBalanceUpdate);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n      window.removeEventListener('balance-updated', handleBalanceUpdate);\r\n    };\r\n  }, [user]);\r\n\r\n  // Add Funds functionality removed\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={`animate-pulse ${className}`}>\r\n        <div className=\"h-6 bg-gray-200 rounded w-24\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (compact) {\r\n    return (\r\n      <div className={`flex items-center ${className}`}>\r\n        <span className=\"font-medium text-sm\">\r\n          {balanceService.formatBalance(balance, currency)}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`flex flex-col ${className}`}>\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <p className=\"text-sm text-gray-500\">Your Balance</p>\r\n          <p className=\"text-xl font-bold\">\r\n            {balanceService.formatBalance(balance, currency)}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Add Funds button removed */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { BalanceDisplay } from './balance-display';\r\n\r\ninterface HeaderBalanceProps {}\r\n\r\nexport const HeaderBalance: React.FC<HeaderBalanceProps> = () => {\r\n  return (\r\n    <div className=\"flex items-center justify-between bg-white px-4 py-2 shadow-sm rounded-lg\">\r\n      <BalanceDisplay compact />\r\n      {/* Add Funds button completely removed */}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { ArrowLeft } from 'lucide-react';\r\nimport { balanceService, Transaction } from '@/services/balanceService';\r\nimport { useAuthSimple } from '@/hooks/useAuthSimple';\r\nimport { HeaderBalance } from '@/components/ui/header-balance';\r\n\r\nconst TransactionHistory: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuthSimple();\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadTransactions = () => {\r\n      try {\r\n        // Get user ID (or create temporary one)\r\n        const userId = user?.id || `temp_user_${Date.now()}`;\r\n        \r\n        // Get transaction history\r\n        const history = balanceService.getTransactionHistory(userId);\r\n        setTransactions(history);\r\n      } catch (error) {\r\n        console.error('Error loading transactions:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadTransactions();\r\n  }, [user]);\r\n\r\n  const formatDate = (timestamp: number) => {\r\n    return new Date(timestamp).toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen bg-gray-50\">\r\n      {/* Header */}\r\n      <div className=\"bg-white shadow-sm sticky top-0 z-10\">\r\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\r\n          <div className=\"flex items-center\">\r\n            <button\r\n              onClick={() => navigate(-1)}\r\n              className=\"p-2 mr-2 text-gray-600 hover:bg-gray-100 rounded-full transition-colors\"\r\n            >\r\n              <ArrowLeft size={20} />\r\n            </button>\r\n            <h1 className=\"text-xl font-semibold\">Transaction History</h1>\r\n          </div>\r\n          \r\n          <div className=\"w-32\">\r\n            <HeaderBalance />\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main Content */}\r\n      <div className=\"container mx-auto px-4 py-6 flex-grow\">\r\n        {isLoading ? (\r\n          <div className=\"flex justify-center items-center h-64\">\r\n            <div className=\"animate-spin rounded-full h-12 w-12 border-2 border-blue-500 border-t-transparent\"></div>\r\n          </div>\r\n        ) : transactions.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <p className=\"text-gray-500\">No transactions found</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {transactions.map((transaction) => (\r\n              <div\r\n                key={transaction.id}\r\n                className=\"bg-white rounded-lg shadow-sm p-4 flex items-center justify-between\"\r\n              >\r\n                <div>\r\n                  <p className=\"font-medium\">{transaction.description}</p>\r\n                  <p className=\"text-sm text-gray-500\">{formatDate(transaction.timestamp)}</p>\r\n                  <div className=\"flex items-center mt-1\">\r\n                    <span className={`text-xs px-2 py-0.5 rounded-full ${\r\n                      transaction.status === 'completed' \r\n                        ? 'bg-green-100 text-green-800' \r\n                        : transaction.status === 'pending'\r\n                        ? 'bg-yellow-100 text-yellow-800'\r\n                        : 'bg-red-100 text-red-800'\r\n                    }`}>\r\n                      {transaction.status}\r\n                    </span>\r\n                    {transaction.paymentMethod && (\r\n                      <span className=\"text-xs text-gray-500 ml-2\">\r\n                        via {transaction.paymentMethod}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className={`font-bold ${\r\n                  transaction.type === 'credit' ? 'text-green-600' : 'text-red-600'\r\n                }`}>\r\n                  {transaction.type === 'credit' ? '+' : '-'}\r\n                  {balanceService.formatBalance(transaction.amount)}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionHistory;\r\n"],"names":["BalanceDisplay","showAddFunds","compact","className","user","useAuthSimple","balance","setBalance","useState","currency","setCurrency","isLoading","setIsLoading","getTempUserId","tempId","localStorage","getItem","Date","now","setItem","getCurrentUserId","id","useEffect","loadBalance","userId","userBalance","balanceService","getUserBalance","error","toast","intervalId","setInterval","handleBalanceUpdate","addEventListener","clearInterval","removeEventListener","div","span","formatBalance","p","HeaderBalance","TransactionHistory","navigate","useNavigate","transactions","setTransactions","history","getTransactionHistory","loadTransactions","formatDate","timestamp","toLocaleString","button","onClick","ArrowLeft","size","h1","_jsx","length","map","transaction","description","status","paymentMethod","_jsxs","type","amount"],"mappings":"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"}