{"version":3,"file":"balanceService-BrshoRSL.js","sources":["../../src/services/balanceService.ts"],"sourcesContent":["import { toast } from 'sonner';\r\n\r\n// Interface untuk data saldo pengguna\r\nexport interface UserBalance {\r\n  userId: string;\r\n  balance: number;\r\n  currency: string;\r\n  lastUpdated: number;\r\n  transactions: Transaction[];\r\n}\r\n\r\n// Interface untuk transaksi\r\nexport interface Transaction {\r\n  id: string;\r\n  amount: number;\r\n  type: 'debit' | 'credit';\r\n  description: string;\r\n  timestamp: number;\r\n  status: 'pending' | 'completed' | 'failed';\r\n  paymentMethod?: string;\r\n}\r\n\r\n// Kunci untuk menyimpan data di localStorage\r\nconst BALANCE_STORAGE_KEY = 'hushhly_user_balance';\r\nconst DEFAULT_BALANCE = 1000; // 1000 USD sebagai saldo default\r\n\r\n/**\r\n * Service untuk mengelola saldo pengguna\r\n */\r\nexport const balanceService = {\r\n  /**\r\n   * Mendapatkan saldo pengguna\r\n   * @param userId ID pengguna\r\n   * @returns Data saldo pengguna\r\n   */\r\n  getUserBalance(userId: string): UserBalance {\r\n    try {\r\n      // Coba ambil data dari localStorage\r\n      const storedData = localStorage.getItem(BALANCE_STORAGE_KEY);\r\n\r\n      if (storedData) {\r\n        const balances = JSON.parse(storedData) as Record<string, UserBalance>;\r\n\r\n        // Jika data pengguna sudah ada, kembalikan\r\n        if (balances[userId]) {\r\n          return balances[userId];\r\n        }\r\n      }\r\n\r\n      // Jika tidak ada data, buat data baru\r\n      const newBalance: UserBalance = {\r\n        userId,\r\n        balance: DEFAULT_BALANCE,\r\n        currency: 'USD',\r\n        lastUpdated: Date.now(),\r\n        transactions: []\r\n      };\r\n\r\n      // Simpan data baru\r\n      this.saveUserBalance(userId, newBalance);\r\n\r\n      return newBalance;\r\n    } catch (error) {\r\n      console.error('Error getting user balance:', error);\r\n\r\n      // Kembalikan data default jika terjadi error\r\n      return {\r\n        userId,\r\n        balance: DEFAULT_BALANCE,\r\n        currency: 'USD',\r\n        lastUpdated: Date.now(),\r\n        transactions: []\r\n      };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Menyimpan data saldo pengguna\r\n   * @param userId ID pengguna\r\n   * @param balanceData Data saldo pengguna\r\n   */\r\n  saveUserBalance(userId: string, balanceData: UserBalance): void {\r\n    try {\r\n      // Coba ambil data dari localStorage\r\n      const storedData = localStorage.getItem(BALANCE_STORAGE_KEY);\r\n      let balances: Record<string, UserBalance> = {};\r\n\r\n      if (storedData) {\r\n        balances = JSON.parse(storedData);\r\n      }\r\n\r\n      // Update data pengguna\r\n      balances[userId] = {\r\n        ...balanceData,\r\n        lastUpdated: Date.now()\r\n      };\r\n\r\n      // Simpan kembali ke localStorage\r\n      localStorage.setItem(BALANCE_STORAGE_KEY, JSON.stringify(balances));\r\n    } catch (error) {\r\n      console.error('Error saving user balance:', error);\r\n      toast.error('Gagal menyimpan data saldo');\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Menambah saldo pengguna\r\n   * @param userId ID pengguna\r\n   * @param amount Jumlah yang ditambahkan\r\n   * @param description Deskripsi transaksi\r\n   * @returns Status keberhasilan\r\n   */\r\n  async addBalance(userId: string, amount: number, description: string): Promise<boolean> {\r\n    try {\r\n      // Dapatkan data saldo pengguna\r\n      const balanceData = this.getUserBalance(userId);\r\n\r\n      // Buat transaksi baru\r\n      const transaction: Transaction = {\r\n        id: `TRX${Date.now()}${Math.floor(Math.random() * 1000)}`,\r\n        amount,\r\n        type: 'credit',\r\n        description,\r\n        timestamp: Date.now(),\r\n        status: 'pending'\r\n      };\r\n\r\n      // Tambahkan transaksi ke daftar transaksi\r\n      balanceData.transactions.unshift(transaction);\r\n\r\n      // Simpan perubahan\r\n      this.saveUserBalance(userId, balanceData);\r\n\r\n      // Simulasi proses backend\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n\r\n      // Update status transaksi menjadi completed\r\n      const updatedBalanceData = this.getUserBalance(userId);\r\n      const transactionIndex = updatedBalanceData.transactions.findIndex(t => t.id === transaction.id);\r\n\r\n      if (transactionIndex !== -1) {\r\n        updatedBalanceData.transactions[transactionIndex].status = 'completed';\r\n        updatedBalanceData.balance += amount;\r\n\r\n        // Simpan perubahan\r\n        this.saveUserBalance(userId, updatedBalanceData);\r\n\r\n        // Dispatch custom event untuk memicu update UI\r\n        window.dispatchEvent(new Event('balance-updated'));\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error adding balance:', error);\r\n      toast.error('Gagal menambah saldo');\r\n      return false;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Mengurangi saldo pengguna (untuk pembayaran)\r\n   * @param userId ID pengguna\r\n   * @param amount Jumlah yang dikurangi\r\n   * @param description Deskripsi transaksi\r\n   * @param paymentMethod Metode pembayaran\r\n   * @returns Status keberhasilan dan detail transaksi\r\n   */\r\n  async deductBalance(\r\n    userId: string,\r\n    amount: number,\r\n    description: string,\r\n    paymentMethod?: string\r\n  ): Promise<{ success: boolean; transaction?: Transaction; error?: string }> {\r\n    try {\r\n      // Dapatkan data saldo pengguna\r\n      const balanceData = this.getUserBalance(userId);\r\n\r\n      // Cek apakah saldo mencukupi\r\n      if (balanceData.balance < amount) {\r\n        return {\r\n          success: false,\r\n          error: 'Saldo tidak mencukupi'\r\n        };\r\n      }\r\n\r\n      // Buat transaksi baru\r\n      const transaction: Transaction = {\r\n        id: `TRX${Date.now()}${Math.floor(Math.random() * 1000)}`,\r\n        amount,\r\n        type: 'debit',\r\n        description,\r\n        timestamp: Date.now(),\r\n        status: 'pending',\r\n        paymentMethod\r\n      };\r\n\r\n      // Tambahkan transaksi ke daftar transaksi\r\n      balanceData.transactions.unshift(transaction);\r\n\r\n      // Simpan perubahan\r\n      this.saveUserBalance(userId, balanceData);\r\n\r\n      // Simulasi proses backend\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n      // Update status transaksi menjadi completed\r\n      const updatedBalanceData = this.getUserBalance(userId);\r\n      const transactionIndex = updatedBalanceData.transactions.findIndex(t => t.id === transaction.id);\r\n\r\n      if (transactionIndex !== -1) {\r\n        updatedBalanceData.transactions[transactionIndex].status = 'completed';\r\n        updatedBalanceData.balance -= amount;\r\n\r\n        // Simpan perubahan\r\n        this.saveUserBalance(userId, updatedBalanceData);\r\n\r\n        // Dispatch custom event untuk memicu update UI\r\n        window.dispatchEvent(new Event('balance-updated'));\r\n\r\n        return {\r\n          success: true,\r\n          transaction: updatedBalanceData.transactions[transactionIndex]\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: 'Gagal memproses transaksi'\r\n      };\r\n    } catch (error) {\r\n      console.error('Error deducting balance:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Gagal mengurangi saldo'\r\n      };\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Mendapatkan riwayat transaksi pengguna\r\n   * @param userId ID pengguna\r\n   * @returns Daftar transaksi\r\n   */\r\n  getTransactionHistory(userId: string): Transaction[] {\r\n    try {\r\n      const balanceData = this.getUserBalance(userId);\r\n      return balanceData.transactions;\r\n    } catch (error) {\r\n      console.error('Error getting transaction history:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Format saldo dengan format mata uang\r\n   * @param amount Jumlah saldo\r\n   * @param currency Mata uang\r\n   * @returns String saldo dengan format mata uang\r\n   */\r\n  formatBalance(amount: number, currency: string = 'USD'): string {\r\n    try {\r\n      return new Intl.NumberFormat('en-US', {\r\n        style: 'currency',\r\n        currency,\r\n        minimumFractionDigits: 0,\r\n        maximumFractionDigits: 0\r\n      }).format(amount);\r\n    } catch (error) {\r\n      console.error('Error formatting balance:', error);\r\n      return `${currency} ${amount}`;\r\n    }\r\n  }\r\n};\r\n"],"names":["BALANCE_STORAGE_KEY","DEFAULT_BALANCE","balanceService","getUserBalance","userId","storedData","localStorage","getItem","balances","JSON","parse","newBalance","balance","currency","lastUpdated","Date","now","transactions","saveUserBalance","error","balanceData","setItem","stringify","toast","addBalance","amount","description","transaction","id","Math","floor","random","type","timestamp","status","unshift","Promise","resolve","setTimeout","updatedBalanceData","transactionIndex","findIndex","t","window","dispatchEvent","Event","deductBalance","paymentMethod","success","Error","message","getTransactionHistory","formatBalance","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format"],"mappings":"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"}