{"version":3,"file":"activityTrackingService-Bml4NAu5.js","sources":["../../src/services/activityTrackingService.ts"],"sourcesContent":["import { User } from '../types/user';\r\n\r\n// Define interfaces for activity tracking\r\nexport interface UserActivity {\r\n  userId: string;\r\n  sessionStartTime: number;\r\n  sessionEndTime?: number;\r\n  totalTimeToday: number;\r\n  totalSessions: number;\r\n  currentStreak: number;\r\n  longestStreak: number;\r\n  lastActiveDate: string;\r\n  pagesVisited: PageVisit[];\r\n  meditationSessions: MeditationSession[];\r\n}\r\n\r\nexport interface PageVisit {\r\n  path: string;\r\n  title: string;\r\n  visitTime: number;\r\n  duration?: number;\r\n}\r\n\r\nexport interface MeditationSession {\r\n  id: string;\r\n  title: string;\r\n  startTime: number;\r\n  endTime?: number;\r\n  duration?: number;\r\n  completed: boolean;\r\n}\r\n\r\n// Storage keys\r\nconst ACTIVITY_STORAGE_KEY = 'hushhly_user_activity';\r\nconst SESSION_START_KEY = 'hushhly_session_start';\r\nconst CURRENT_PAGE_KEY = 'hushhly_current_page';\r\n\r\n// Helper functions\r\nconst getFormattedDate = (date: Date = new Date()): string => {\r\n  return date.toISOString().split('T')[0]; // YYYY-MM-DD format\r\n};\r\n\r\nconst getActivityData = (userId: string): UserActivity => {\r\n  try {\r\n    const storedData = localStorage.getItem(ACTIVITY_STORAGE_KEY);\r\n    if (storedData) {\r\n      const activities = JSON.parse(storedData) as Record<string, UserActivity>;\r\n      \r\n      // If user activity exists, return it\r\n      if (activities[userId]) {\r\n        return activities[userId];\r\n      }\r\n    }\r\n    \r\n    // If no data exists, create new activity record\r\n    return {\r\n      userId,\r\n      sessionStartTime: Date.now(),\r\n      totalTimeToday: 0,\r\n      totalSessions: 0,\r\n      currentStreak: 0,\r\n      longestStreak: 0,\r\n      lastActiveDate: getFormattedDate(),\r\n      pagesVisited: [],\r\n      meditationSessions: []\r\n    };\r\n  } catch (error) {\r\n    console.error('Error getting activity data:', error);\r\n    \r\n    // Return default activity data\r\n    return {\r\n      userId,\r\n      sessionStartTime: Date.now(),\r\n      totalTimeToday: 0,\r\n      totalSessions: 0,\r\n      currentStreak: 0,\r\n      longestStreak: 0,\r\n      lastActiveDate: getFormattedDate(),\r\n      pagesVisited: [],\r\n      meditationSessions: []\r\n    };\r\n  }\r\n};\r\n\r\nconst saveActivityData = (userId: string, activityData: UserActivity): void => {\r\n  try {\r\n    // Get existing data\r\n    const storedData = localStorage.getItem(ACTIVITY_STORAGE_KEY);\r\n    const activities = storedData ? JSON.parse(storedData) as Record<string, UserActivity> : {};\r\n    \r\n    // Update user's activity data\r\n    activities[userId] = activityData;\r\n    \r\n    // Save back to localStorage\r\n    localStorage.setItem(ACTIVITY_STORAGE_KEY, JSON.stringify(activities));\r\n  } catch (error) {\r\n    console.error('Error saving activity data:', error);\r\n  }\r\n};\r\n\r\n// Main service\r\nexport const activityTrackingService = {\r\n  // Start tracking a new session\r\n  startSession(userId: string): void {\r\n    const startTime = Date.now();\r\n    localStorage.setItem(SESSION_START_KEY, startTime.toString());\r\n    \r\n    const activityData = getActivityData(userId);\r\n    \r\n    // Check if this is a new day\r\n    const today = getFormattedDate();\r\n    if (activityData.lastActiveDate !== today) {\r\n      // It's a new day, reset daily counters\r\n      activityData.totalTimeToday = 0;\r\n      \r\n      // Check streak\r\n      const yesterday = getFormattedDate(new Date(Date.now() - 86400000)); // 24 hours ago\r\n      if (activityData.lastActiveDate === yesterday) {\r\n        // Consecutive day, increment streak\r\n        activityData.currentStreak += 1;\r\n        \r\n        // Update longest streak if needed\r\n        if (activityData.currentStreak > activityData.longestStreak) {\r\n          activityData.longestStreak = activityData.currentStreak;\r\n        }\r\n      } else {\r\n        // Streak broken, reset to 1 (today)\r\n        activityData.currentStreak = 1;\r\n      }\r\n      \r\n      activityData.lastActiveDate = today;\r\n    }\r\n    \r\n    // Increment session count\r\n    activityData.totalSessions += 1;\r\n    activityData.sessionStartTime = startTime;\r\n    \r\n    saveActivityData(userId, activityData);\r\n  },\r\n  \r\n  // End the current session\r\n  endSession(userId: string): void {\r\n    const endTime = Date.now();\r\n    const startTimeStr = localStorage.getItem(SESSION_START_KEY);\r\n    \r\n    if (startTimeStr) {\r\n      const startTime = parseInt(startTimeStr, 10);\r\n      const sessionDuration = endTime - startTime;\r\n      \r\n      const activityData = getActivityData(userId);\r\n      activityData.sessionEndTime = endTime;\r\n      activityData.totalTimeToday += sessionDuration;\r\n      \r\n      saveActivityData(userId, activityData);\r\n      \r\n      // Clear session start time\r\n      localStorage.removeItem(SESSION_START_KEY);\r\n    }\r\n  },\r\n  \r\n  // Track page visit\r\n  trackPageVisit(userId: string, path: string, title: string): void {\r\n    const visitTime = Date.now();\r\n    \r\n    // End previous page visit if exists\r\n    const currentPageData = localStorage.getItem(CURRENT_PAGE_KEY);\r\n    if (currentPageData) {\r\n      try {\r\n        const { userId: prevUserId, path: prevPath, startTime } = JSON.parse(currentPageData);\r\n        \r\n        if (prevUserId === userId && prevPath !== path) {\r\n          const activityData = getActivityData(userId);\r\n          const duration = visitTime - startTime;\r\n          \r\n          // Find and update the previous page visit\r\n          const prevPageVisitIndex = activityData.pagesVisited.findIndex(\r\n            visit => visit.path === prevPath && !visit.duration\r\n          );\r\n          \r\n          if (prevPageVisitIndex !== -1) {\r\n            activityData.pagesVisited[prevPageVisitIndex].duration = duration;\r\n          }\r\n          \r\n          saveActivityData(userId, activityData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error processing previous page visit:', error);\r\n      }\r\n    }\r\n    \r\n    // Record new page visit\r\n    const activityData = getActivityData(userId);\r\n    activityData.pagesVisited.push({\r\n      path,\r\n      title,\r\n      visitTime\r\n    });\r\n    \r\n    // Keep only the last 100 page visits to avoid localStorage size issues\r\n    if (activityData.pagesVisited.length > 100) {\r\n      activityData.pagesVisited = activityData.pagesVisited.slice(-100);\r\n    }\r\n    \r\n    saveActivityData(userId, activityData);\r\n    \r\n    // Set as current page\r\n    localStorage.setItem(CURRENT_PAGE_KEY, JSON.stringify({\r\n      userId,\r\n      path,\r\n      startTime: visitTime\r\n    }));\r\n  },\r\n  \r\n  // Start meditation session\r\n  startMeditationSession(userId: string, sessionId: string, title: string): void {\r\n    const startTime = Date.now();\r\n    \r\n    const activityData = getActivityData(userId);\r\n    activityData.meditationSessions.push({\r\n      id: sessionId,\r\n      title,\r\n      startTime,\r\n      completed: false\r\n    });\r\n    \r\n    saveActivityData(userId, activityData);\r\n  },\r\n  \r\n  // End meditation session\r\n  endMeditationSession(userId: string, sessionId: string, completed: boolean = true): void {\r\n    const endTime = Date.now();\r\n    \r\n    const activityData = getActivityData(userId);\r\n    const sessionIndex = activityData.meditationSessions.findIndex(\r\n      session => session.id === sessionId && !session.endTime\r\n    );\r\n    \r\n    if (sessionIndex !== -1) {\r\n      const session = activityData.meditationSessions[sessionIndex];\r\n      session.endTime = endTime;\r\n      session.duration = endTime - session.startTime;\r\n      session.completed = completed;\r\n      \r\n      saveActivityData(userId, activityData);\r\n    }\r\n  },\r\n  \r\n  // Get user activity summary\r\n  getActivitySummary(userId: string): {\r\n    totalTimeToday: number;\r\n    totalSessions: number;\r\n    currentStreak: number;\r\n    longestStreak: number;\r\n  } {\r\n    const activityData = getActivityData(userId);\r\n    \r\n    return {\r\n      totalTimeToday: activityData.totalTimeToday,\r\n      totalSessions: activityData.totalSessions,\r\n      currentStreak: activityData.currentStreak,\r\n      longestStreak: activityData.longestStreak\r\n    };\r\n  },\r\n  \r\n  // Get formatted activity summary\r\n  getFormattedActivitySummary(userId: string): {\r\n    totalTimeToday: string;\r\n    totalSessions: number;\r\n    currentStreak: number;\r\n  } {\r\n    const { totalTimeToday, totalSessions, currentStreak } = this.getActivitySummary(userId);\r\n    \r\n    // Format total time as hours and minutes\r\n    const hours = Math.floor(totalTimeToday / 3600000);\r\n    const minutes = Math.floor((totalTimeToday % 3600000) / 60000);\r\n    const formattedTime = hours > 0 \r\n      ? `${hours}.${Math.floor(minutes / 6)}` // Convert to decimal hours (e.g., 1.5 hrs)\r\n      : `${minutes} min`;\r\n    \r\n    return {\r\n      totalTimeToday: formattedTime,\r\n      totalSessions,\r\n      currentStreak\r\n    };\r\n  },\r\n  \r\n  // Get recent page visits\r\n  getRecentPageVisits(userId: string, limit: number = 10): PageVisit[] {\r\n    const activityData = getActivityData(userId);\r\n    return activityData.pagesVisited.slice(-limit).reverse();\r\n  },\r\n  \r\n  // Get meditation sessions\r\n  getMeditationSessions(userId: string, limit: number = 10): MeditationSession[] {\r\n    const activityData = getActivityData(userId);\r\n    return activityData.meditationSessions.slice(-limit).reverse();\r\n  }\r\n};\r\n"],"names":["ACTIVITY_STORAGE_KEY","SESSION_START_KEY","CURRENT_PAGE_KEY","getFormattedDate","date","Date","toISOString","split","getActivityData","userId","storedData","localStorage","getItem","activities","JSON","parse","sessionStartTime","now","totalTimeToday","totalSessions","currentStreak","longestStreak","lastActiveDate","pagesVisited","meditationSessions","error","saveActivityData","activityData","setItem","stringify","activityTrackingService","startSession","startTime","toString","today","yesterday","endSession","endTime","startTimeStr","parseInt","sessionDuration","sessionEndTime","removeItem","trackPageVisit","path","title","visitTime","currentPageData","prevUserId","prevPath","duration","prevPageVisitIndex","findIndex","visit","push","length","slice","startMeditationSession","sessionId","id","completed","endMeditationSession","sessionIndex","session","getActivitySummary","getFormattedActivitySummary","hours","Math","floor","minutes","getRecentPageVisits","limit","reverse","getMeditationSessions"],"mappings":"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"}