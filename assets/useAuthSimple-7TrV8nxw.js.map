{"version":3,"file":"useAuthSimple-7TrV8nxw.js","sources":["../../src/hooks/useAuthSimple.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { User } from '../types/user';\r\n\r\n// Simple auth hook without JSX\r\nexport const useAuthSimple = () => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const checkAuth = () => {\r\n      try {\r\n        const userData = localStorage.getItem('user');\r\n        if (userData) {\r\n          const parsedUser = JSON.parse(userData);\r\n          // Add an ID if it doesn't exist (for demo purposes)\r\n          if (!parsedUser.id) {\r\n            parsedUser.id = `user_${Math.random().toString(36).substring(2, 15)}`;\r\n            localStorage.setItem('user', JSON.stringify(parsedUser));\r\n          }\r\n          setUser(parsedUser);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking auth:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const signIn = async (email: string, password: string): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // In a real implementation, this would call Firebase Auth\r\n      // For now, we'll simulate a successful login\r\n      \r\n      // Simulate network delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const userData: User = {\r\n        id: `user_${Math.random().toString(36).substring(2, 15)}`,\r\n        email,\r\n        fullName: email.split('@')[0],\r\n        createdAt: new Date(),\r\n        lastActiveAt: new Date(),\r\n        isPremium: false,\r\n        tags: ['new'],\r\n        actions: []\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error signing in:', error);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const signUp = async (email: string, password: string, fullName: string): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      \r\n      // In a real implementation, this would call Firebase Auth\r\n      // For now, we'll simulate a successful signup\r\n      \r\n      // Simulate network delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      const userData: User = {\r\n        id: `user_${Math.random().toString(36).substring(2, 15)}`,\r\n        email,\r\n        fullName,\r\n        createdAt: new Date(),\r\n        lastActiveAt: new Date(),\r\n        isPremium: false,\r\n        tags: ['new'],\r\n        actions: []\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      setUser(userData);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error signing up:', error);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const signOut = () => {\r\n    localStorage.removeItem('user');\r\n    setUser(null);\r\n  };\r\n\r\n  const updateUserProfile = async (userData: Partial<User>): Promise<boolean> => {\r\n    try {\r\n      if (!user) return false;\r\n      \r\n      const updatedUser = { ...user, ...userData, lastActiveAt: new Date() };\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n      setUser(updatedUser);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating user profile:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  return {\r\n    user,\r\n    isLoading,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    updateUserProfile\r\n  };\r\n};\r\n"],"names":["useAuthSimple","user","setUser","useState","isLoading","setIsLoading","useEffect","userData","localStorage","getItem","parsedUser","JSON","parse","id","Math","random","toString","substring","setItem","stringify","error","signIn","email","password","Promise","resolve","setTimeout","fullName","split","createdAt","Date","lastActiveAt","isPremium","tags","actions","signUp","signOut","removeItem","updateUserProfile","updatedUser"],"mappings":"wCAIO,MAAMA,EAAgB,IAAA,CAC3B,KAAM,CAACC,EAAMC,CAAQ,EAAGC,WAAsB,IAAA,EACxC,CAACC,EAAWC,CAAa,EAAGF,WAAkB,EAAA,EAGpDG,OAAAA,EAAAA,UAAU,IAAA,EACU,IAAA,CACZ,GAAA,CACIC,MAAAA,EAAWC,aAAaC,QAAQ,MAAA,EACtC,GAAIF,EAAU,CACNG,MAAAA,EAAaC,KAAKC,MAAML,CAAAA,EAEzBG,EAAWG,KACHA,EAAAA,GAAK,QAAQC,KAAKC,OAASC,EAAAA,SAAS,EAAA,EAAIC,UAAU,EAAG,EAAK,CAAA,GACrET,aAAaU,QAAQ,OAAQP,KAAKQ,UAAUT,CAAAA,CAAAA,GAE9CR,EAAQQ,CAAAA,CACV,QACOU,EAAO,CACNA,QAAAA,MAAM,uBAAwBA,CAAAA,CAAAA,QAC9B,CACRf,EAAa,EAAA,CACf,CAAA,IAIJ,EAAG,CAAE,CAAA,EAwFE,CACLJ,KAAAA,EACAG,UAAAA,EACAiB,OAzFa,MAAOC,EAAeC,IAAAA,CAC/B,GAAA,CACFlB,EAAa,EAAA,EAMb,MAAM,IAAImB,QAAQC,GAAWC,WAAWD,EAAS,GAAA,CAAA,EAEjD,MAAMlB,EAAiB,CACrBM,GAAI,QAAQC,KAAKC,OAAM,EAAGC,SAAS,EAAIC,EAAAA,UAAU,EAAG,EAAK,CAAA,GACzDK,MAAAA,EACAK,SAAUL,EAAMM,MAAM,GAAA,EAAK,CAAE,EAC7BC,cAAeC,KACfC,iBAAkBD,KAClBE,UAAW,GACXC,KAAM,CAAC,KAAM,EACbC,QAAS,CAAE,CAAA,EAGb1B,oBAAaU,QAAQ,OAAQP,KAAKQ,UAAUZ,CAAAA,CAAAA,EAC5CL,EAAQK,CAAAA,EAED,SACAa,EAAO,CACNA,eAAAA,MAAM,oBAAqBA,CAAAA,EAC5B,EAAA,QACC,CACRf,EAAa,EAAA,CACf,CAAA,EA4DA8B,OAzDa,MAAOb,EAAeC,EAAkBI,IAAAA,CACjD,GAAA,CACFtB,EAAa,EAAA,EAMb,MAAM,IAAImB,QAAQC,GAAWC,WAAWD,EAAS,IAAA,CAAA,EAEjD,MAAMlB,EAAiB,CACrBM,GAAI,QAAQC,KAAKC,OAAM,EAAGC,SAAS,EAAIC,EAAAA,UAAU,EAAG,EAAK,CAAA,GACzDK,MAAAA,EACAK,SAAAA,EACAE,cAAeC,KACfC,iBAAkBD,KAClBE,UAAW,GACXC,KAAM,CAAC,KAAM,EACbC,QAAS,CAAE,CAAA,EAGb1B,oBAAaU,QAAQ,OAAQP,KAAKQ,UAAUZ,CAAAA,CAAAA,EAC5CL,EAAQK,CAAAA,EAED,SACAa,EAAO,CACNA,eAAAA,MAAM,oBAAqBA,CAAAA,EAC5B,EAAA,QACC,CACRf,EAAa,EAAA,CACf,CAAA,EA4BA+B,QAzBc,IAAA,CACd5B,aAAa6B,WAAW,MAAA,EACxBnC,EAAQ,IAAA,CAAA,EAwBRoC,kBArBwB,MAAO/B,GAAAA,CAC3B,GAAA,CACE,GAAA,CAACN,EAAa,MAAA,GAElB,MAAMsC,EAAc,CAAE,GAAGtC,EAAM,GAAGM,EAAUwB,iBAAkBD,IAAAA,EAC9DtB,oBAAaU,QAAQ,OAAQP,KAAKQ,UAAUoB,CAAAA,CAAAA,EAC5CrC,EAAQqC,CAAAA,EAED,SACAnB,EAAO,CACNA,eAAAA,MAAM,+BAAgCA,CAAAA,EACvC,EACT,CAAA,CASAkB,CAEJ"}