{"version":3,"file":"ForgotPassword-PwlL6AxY.js","sources":["../../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../../node_modules/@emailjs/browser/es/store/store.js","../../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../../node_modules/@emailjs/browser/es/methods/init/init.js","../../node_modules/@emailjs/browser/es/api/sendPost.js","../../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../../node_modules/@emailjs/browser/es/methods/send/send.js","../../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","../../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../../node_modules/@emailjs/browser/es/index.js","../../src/services/emailService.ts","../../src/pages/ForgotPassword.tsx"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","// emailService.ts\r\n// This service handles sending emails using EmailJS\r\n\r\nimport emailjs from '@emailjs/browser';\r\n\r\n// EmailJS configuration\r\nconst SERVICE_ID = 'service_hushhly'; // Replace with your EmailJS service ID\r\nconst TEMPLATE_ID_OTP = 'template_otp'; // Replace with your EmailJS template ID for OTP\r\nconst PUBLIC_KEY = 'YOUR_PUBLIC_KEY'; // Replace with your EmailJS public key\r\n\r\n// Initialize EmailJS\r\nemailjs.init(PUBLIC_KEY);\r\n\r\n// Generate a random OTP code\r\nexport const generateOTP = (): string => {\r\n  return Math.floor(1000 + Math.random() * 9000).toString();\r\n};\r\n\r\n// Store OTP codes temporarily (in a real app, this would be in a database)\r\nconst otpStore: Record<string, { code: string; timestamp: number }> = {};\r\n\r\n// Send OTP email\r\nexport const sendOTPEmail = async (email: string): Promise<{ success: boolean; otp?: string; error?: string }> => {\r\n  try {\r\n    // Generate OTP\r\n    const otp = generateOTP();\r\n    \r\n    // Store OTP with timestamp (valid for 10 minutes)\r\n    otpStore[email] = {\r\n      code: otp,\r\n      timestamp: Date.now() + 10 * 60 * 1000 // 10 minutes expiry\r\n    };\r\n    \r\n    // For demo purposes, we'll just log the OTP to console\r\n    console.log(`OTP for ${email}: ${otp}`);\r\n    \r\n    // In a real implementation, we would send the email using EmailJS\r\n    // Uncomment the following code and replace with your actual EmailJS configuration\r\n    /*\r\n    const response = await emailjs.send(\r\n      SERVICE_ID,\r\n      TEMPLATE_ID_OTP,\r\n      {\r\n        to_email: email,\r\n        otp_code: otp,\r\n        to_name: email.split('@')[0]\r\n      }\r\n    );\r\n    \r\n    if (response.status !== 200) {\r\n      throw new Error('Failed to send email');\r\n    }\r\n    */\r\n    \r\n    // For demo purposes, we'll simulate a successful email send\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    return { success: true, otp };\r\n  } catch (error) {\r\n    console.error('Error sending OTP email:', error);\r\n    return { success: false, error: 'Failed to send OTP email. Please try again.' };\r\n  }\r\n};\r\n\r\n// Verify OTP code\r\nexport const verifyOTP = (email: string, code: string): boolean => {\r\n  const storedOTP = otpStore[email];\r\n  \r\n  // Check if OTP exists and is valid\r\n  if (!storedOTP) {\r\n    return false;\r\n  }\r\n  \r\n  // Check if OTP has expired\r\n  if (storedOTP.timestamp < Date.now()) {\r\n    // Remove expired OTP\r\n    delete otpStore[email];\r\n    return false;\r\n  }\r\n  \r\n  // Check if OTP matches\r\n  const isValid = storedOTP.code === code;\r\n  \r\n  // If valid, remove the OTP (one-time use only)\r\n  if (isValid) {\r\n    delete otpStore[email];\r\n  }\r\n  \r\n  return isValid;\r\n};\r\n\r\n// Reset password\r\nexport const resetPassword = async (email: string, newPassword: string): Promise<boolean> => {\r\n  try {\r\n    // In a real implementation, this would update the password in your authentication system\r\n    // For demo purposes, we'll just simulate a successful password reset\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Store the new password in localStorage (for demo purposes only)\r\n    const userData = JSON.parse(localStorage.getItem('user') || '{}');\r\n    userData.password = newPassword;\r\n    localStorage.setItem('user', JSON.stringify(userData));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error resetting password:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Email service object\r\nconst emailService = {\r\n  sendOTPEmail,\r\n  verifyOTP,\r\n  resetPassword,\r\n  generateOTP\r\n};\r\n\r\nexport default emailService;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { useToast } from \"@/components/ui/use-toast\";\r\nimport { ArrowLeft, X, Mail, AlertCircle, CheckCircle } from 'lucide-react';\r\nimport emailService from '@/services/emailService';\r\n\r\nconst ForgotPassword: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const { toast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState('');\r\n  const [showOTP, setShowOTP] = useState(false);\r\n  const [otp, setOtp] = useState(['', '', '', '']);\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otpError, setOtpError] = useState('');\r\n  const [otpCode, setOtpCode] = useState(''); // Store the actual OTP code\r\n  const [otpExpiry, setOtpExpiry] = useState(0);\r\n  const [countdown, setCountdown] = useState(0);\r\n\r\n  // Countdown timer effect\r\n  useEffect(() => {\r\n    let timer: NodeJS.Timeout;\r\n\r\n    if (countdown > 0) {\r\n      timer = setInterval(() => {\r\n        setCountdown(prev => prev - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    return () => {\r\n      if (timer) clearInterval(timer);\r\n    };\r\n  }, [countdown]);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!email) {\r\n      toast({\r\n        title: \"Email required\",\r\n        description: \"Please enter your email address\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Validate email format\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      toast({\r\n        title: \"Invalid email\",\r\n        description: \"Please enter a valid email address\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setOtpError('');\r\n\r\n    try {\r\n      // Send OTP email\r\n      const result = await emailService.sendOTPEmail(email);\r\n\r\n      if (result.success && result.otp) {\r\n        // Store OTP code for verification\r\n        setOtpCode(result.otp);\r\n\r\n        // Set OTP expiry (10 minutes from now)\r\n        const expiryTime = Date.now() + 10 * 60 * 1000;\r\n        setOtpExpiry(expiryTime);\r\n\r\n        // Set countdown for resend button (60 seconds)\r\n        setCountdown(60);\r\n\r\n        setOtpSent(true);\r\n        setLoading(false);\r\n\r\n        toast({\r\n          title: \"OTP sent\",\r\n          description: \"Check your email for the verification code\",\r\n        });\r\n\r\n        // Show OTP popup\r\n        setShowOTP(true);\r\n\r\n        // For demo purposes, show the OTP in a toast\r\n        toast({\r\n          title: \"Demo Mode: Your OTP\",\r\n          description: `Your OTP code is: ${result.otp}`,\r\n          duration: 10000, // 10 seconds\r\n        });\r\n      } else {\r\n        setOtpError(result.error || 'Failed to send OTP. Please try again.');\r\n        setLoading(false);\r\n\r\n        toast({\r\n          title: \"Error\",\r\n          description: result.error || 'Failed to send OTP. Please try again.',\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending OTP:', error);\r\n      setOtpError('An unexpected error occurred. Please try again.');\r\n      setLoading(false);\r\n\r\n      toast({\r\n        title: \"Error\",\r\n        description: 'An unexpected error occurred. Please try again.',\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleOtpChange = (index: number, value: string) => {\r\n    // Only allow one digit\r\n    if (value.length > 1) return;\r\n\r\n    // Update the OTP array\r\n    const newOtp = [...otp];\r\n    newOtp[index] = value;\r\n    setOtp(newOtp);\r\n\r\n    // Auto-focus next input\r\n    if (value && index < 3) {\r\n      const nextInput = document.getElementById(`otp-${index + 1}`);\r\n      if (nextInput) nextInput.focus();\r\n    }\r\n  };\r\n\r\n  const handleOtpSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    const enteredOtp = otp.join('');\r\n\r\n    if (enteredOtp.length !== 4) {\r\n      toast({\r\n        title: \"Invalid OTP\",\r\n        description: \"Please enter all 4 digits\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Check if OTP has expired\r\n    if (Date.now() > otpExpiry) {\r\n      toast({\r\n        title: \"OTP Expired\",\r\n        description: \"The verification code has expired. Please request a new one.\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!newPassword) {\r\n      toast({\r\n        title: \"Password required\",\r\n        description: \"Please enter your new password\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Validate password strength\r\n    if (newPassword.length < 6) {\r\n      toast({\r\n        title: \"Weak Password\",\r\n        description: \"Password must be at least 6 characters long\",\r\n        variant: \"destructive\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Verify OTP\r\n      const isValid = enteredOtp === otpCode; // In a real app, use emailService.verifyOTP(email, enteredOtp);\r\n\r\n      if (isValid) {\r\n        // Reset password\r\n        const success = await emailService.resetPassword(email, newPassword);\r\n\r\n        if (success) {\r\n          setLoading(false);\r\n          toast({\r\n            title: \"Password reset successful\",\r\n            description: \"Your password has been reset\",\r\n          });\r\n\r\n          // Navigate to sign in page\r\n          setTimeout(() => {\r\n            navigate('/sign-in');\r\n          }, 1500);\r\n        } else {\r\n          setLoading(false);\r\n          toast({\r\n            title: \"Error\",\r\n            description: \"Failed to reset password. Please try again.\",\r\n            variant: \"destructive\",\r\n          });\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n        toast({\r\n          title: \"Invalid OTP\",\r\n          description: \"The verification code you entered is incorrect\",\r\n          variant: \"destructive\",\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Error resetting password:', error);\r\n      setLoading(false);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"An unexpected error occurred. Please try again.\",\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen bg-white\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center px-4 py-6\">\r\n        <button\r\n          onClick={() => navigate('/sign-in')}\r\n          className=\"p-2 text-black hover:bg-gray-100 rounded-full transition-colors\"\r\n        >\r\n          <ArrowLeft size={20} />\r\n        </button>\r\n      </div>\r\n\r\n      {/* Content */}\r\n      <div className=\"flex-1 flex flex-col items-center px-8\">\r\n        {/* Logo */}\r\n        <div className=\"mb-6\">\r\n          <img\r\n            src=\"/lovable-uploads/cc8b384e-95bb-4fbf-af3b-70bbc53bfd59.png\"\r\n            alt=\"Hushhly Logo\"\r\n            className=\"w-40 h-auto\"\r\n          />\r\n        </div>\r\n\r\n        <h1 className=\"text-2xl font-bold mb-2 text-center\">Forgot Password</h1>\r\n        <p className=\"text-gray-500 mb-8 text-center text-sm px-6\">\r\n          Enter your email address and we'll send you a verification code\r\n        </p>\r\n\r\n        {/* Form */}\r\n        <form onSubmit={handleSubmit} className=\"w-full max-w-md space-y-6\">\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"email\">Email</Label>\r\n            <Input\r\n              id=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"h-12 rounded-xl\"\r\n            />\r\n          </div>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={loading || showOTP}\r\n            className=\"w-full h-12 bg-gradient-to-r from-meditation-lightBlue to-meditation-mediumBlue hover:bg-meditation-mediumBlue text-white font-medium rounded-xl\"\r\n          >\r\n            {loading ? \"Sending...\" : \"Send OTP Code\"}\r\n          </Button>\r\n\r\n          <p className=\"text-center text-sm\">\r\n            Remember your password?{\" \"}\r\n            <span\r\n              onClick={() => navigate('/sign-in')}\r\n              className=\"text-meditation-lightBlue cursor-pointer hover:underline\"\r\n            >\r\n              Sign in\r\n            </span>\r\n          </p>\r\n        </form>\r\n\r\n        {/* OTP Modal */}\r\n        {showOTP && (\r\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\r\n            <div className=\"bg-white rounded-xl p-6 w-full max-w-md relative animate-fade-in-up\">\r\n              <button\r\n                onClick={() => setShowOTP(false)}\r\n                className=\"absolute right-4 top-4 text-gray-500 hover:text-gray-700\"\r\n              >\r\n                <X size={20} />\r\n              </button>\r\n\r\n              <div className=\"flex items-center justify-center mb-4\">\r\n                <div className=\"bg-blue-100 p-3 rounded-full\">\r\n                  <Mail size={24} className=\"text-meditation-lightBlue\" />\r\n                </div>\r\n              </div>\r\n\r\n              <h2 className=\"text-xl font-bold mb-2 text-center\">Verify OTP</h2>\r\n              <p className=\"text-gray-500 mb-2 text-center text-sm\">\r\n                Enter the 4-digit code sent to\r\n              </p>\r\n              <p className=\"text-meditation-lightBlue font-medium mb-6 text-center\">\r\n                {email}\r\n              </p>\r\n\r\n              {otpError && (\r\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4 flex items-start\">\r\n                  <AlertCircle size={18} className=\"text-red-500 mr-2 mt-0.5\" />\r\n                  <p className=\"text-red-600 text-sm\">{otpError}</p>\r\n                </div>\r\n              )}\r\n\r\n              <form onSubmit={handleOtpSubmit} className=\"space-y-6\">\r\n                <div className=\"flex justify-center space-x-2\">\r\n                  {otp.map((digit, index) => (\r\n                    <Input\r\n                      key={index}\r\n                      id={`otp-${index}`}\r\n                      type=\"text\"\r\n                      inputMode=\"numeric\"\r\n                      pattern=\"[0-9]*\"\r\n                      value={digit}\r\n                      onChange={(e) => handleOtpChange(index, e.target.value)}\r\n                      className=\"h-14 w-14 text-center text-xl font-bold rounded-xl\"\r\n                      maxLength={1}\r\n                      autoFocus={index === 0}\r\n                    />\r\n                  ))}\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"new-password\">New Password</Label>\r\n                  <Input\r\n                    id=\"new-password\"\r\n                    type=\"password\"\r\n                    placeholder=\"Enter new password (min. 6 characters)\"\r\n                    value={newPassword}\r\n                    onChange={(e) => setNewPassword(e.target.value)}\r\n                    className=\"h-12 rounded-xl\"\r\n                  />\r\n                </div>\r\n\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={loading}\r\n                  className=\"w-full h-12 bg-gradient-to-r from-meditation-lightBlue to-meditation-mediumBlue hover:bg-meditation-mediumBlue text-white font-medium rounded-xl\"\r\n                >\r\n                  {loading ? \"Resetting...\" : \"Reset Password\"}\r\n                </Button>\r\n\r\n                <div className=\"text-center text-sm text-gray-500\">\r\n                  Didn't receive the code?{\" \"}\r\n                  {countdown > 0 ? (\r\n                    <span className=\"text-gray-400\">\r\n                      Resend in {countdown}s\r\n                    </span>\r\n                  ) : (\r\n                    <span\r\n                      onClick={handleSubmit}\r\n                      className=\"text-meditation-lightBlue cursor-pointer hover:underline\"\r\n                    >\r\n                      Resend\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"text-center text-xs text-gray-400 mt-2\">\r\n                  OTP will expire in 10 minutes\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Wave bottom decoration */}\r\n      <div className=\"relative h-24 mt-4\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          viewBox=\"0 0 1440 320\"\r\n          className=\"absolute bottom-0 left-0 w-full\"\r\n          preserveAspectRatio=\"none\"\r\n        >\r\n          <path\r\n            fill=\"#33C3F0\"\r\n            fillOpacity=\"0.2\"\r\n            d=\"M0,96L48,112C96,128,192,160,288,165.3C384,171,480,149,576,128C672,107,768,85,864,96C960,107,1056,149,1152,165.3C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n          />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"names":["EmailJSResponseStatus","_status","_text","createWebStorage","key","value","store","buildOptions","options","init","origin","opts","sendPost","url","data","headers","response","message","responseStatus","validateParams","publicKey","serviceID","templateID","validateTemplateParams","templateParams","isHeadless","navigator","headlessError","validateBlockListParams","list","watchVariable","isBlockListDisabled","_a","getValue","name","isBlockedValueInParams","params","blockedEmailError","validateLimitRateParams","throttle","id","getLeftTime","storage","lastTime","isLimitRateHit","defaultID","limitRateError","send","blockHeadless","storageProvider","blockList","limitRate","validateForm","form","findHTMLForm","sendForm","currentForm","formData","emailjs","PUBLIC_KEY","generateOTP","Math","floor","random","toString","otpStore","sendOTPEmail","email","otp","code","timestamp","Date","now","console","log","Promise","resolve","setTimeout","success","error","verifyOTP","storedOTP","isValid","resetPassword","newPassword","userData","JSON","parse","localStorage","getItem","password","setItem","stringify","emailService","ForgotPassword","navigate","useNavigate","toast","useToast","loading","setLoading","useState","setEmail","showOTP","setShowOTP","setOtp","setNewPassword","otpSent","setOtpSent","otpError","setOtpError","otpCode","setOtpCode","otpExpiry","setOtpExpiry","countdown","setCountdown","useEffect","timer","setInterval","prev","handleSubmit","e","preventDefault","title","description","variant","test","result","expiryTime","duration","handleOtpChange","index","length","newOtp","nextInput","document","getElementById","focus","handleOtpSubmit","enteredOtp","join","div","className","button","onClick","ArrowLeft","size","img","src","alt","h1","p","onSubmit","Label","htmlFor","Input","type","placeholder","onChange","target","Button","disabled","span","X","Mail","h2","AlertCircle","map","digit","inputMode","pattern","maxLength","autoFocus","_jsxs","_jsx","svg","xmlns","viewBox","preserveAspectRatio","path","fill","fillOpacity","d"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]}