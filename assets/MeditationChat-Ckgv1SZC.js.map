{"version":3,"file":"MeditationChat-Ckgv1SZC.js","sources":["../../node_modules/lucide-react/dist/esm/icons/mic-off.js","../../node_modules/lucide-react/dist/esm/icons/mic.js","../../node_modules/lucide-react/dist/esm/icons/pen-tool.js","../../node_modules/lucide-react/dist/esm/icons/wind.js","../../src/components/ScheduleModal.tsx","../../src/data/meditationQuestions.ts","../../src/components/MeditationChat.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst MicOff = createLucideIcon(\"MicOff\", [\n  [\"line\", { x1: \"2\", x2: \"22\", y1: \"2\", y2: \"22\", key: \"a6p6uj\" }],\n  [\"path\", { d: \"M18.89 13.23A7.12 7.12 0 0 0 19 12v-2\", key: \"80xlxr\" }],\n  [\"path\", { d: \"M5 10v2a7 7 0 0 0 12 5\", key: \"p2k8kg\" }],\n  [\"path\", { d: \"M15 9.34V5a3 3 0 0 0-5.68-1.33\", key: \"1gzdoj\" }],\n  [\"path\", { d: \"M9 9v3a3 3 0 0 0 5.12 2.12\", key: \"r2i35w\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"19\", y2: \"22\", key: \"x3vr5v\" }]\n]);\n\nexport { MicOff as default };\n//# sourceMappingURL=mic-off.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Mic = createLucideIcon(\"Mic\", [\n  [\"path\", { d: \"M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z\", key: \"131961\" }],\n  [\"path\", { d: \"M19 10v2a7 7 0 0 1-14 0v-2\", key: \"1vc78b\" }],\n  [\"line\", { x1: \"12\", x2: \"12\", y1: \"19\", y2: \"22\", key: \"x3vr5v\" }]\n]);\n\nexport { Mic as default };\n//# sourceMappingURL=mic.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst PenTool = createLucideIcon(\"PenTool\", [\n  [\n    \"path\",\n    {\n      d: \"M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z\",\n      key: \"nt11vn\"\n    }\n  ],\n  [\n    \"path\",\n    {\n      d: \"m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18\",\n      key: \"15qc1e\"\n    }\n  ],\n  [\"path\", { d: \"m2.3 2.3 7.286 7.286\", key: \"1wuzzi\" }],\n  [\"circle\", { cx: \"11\", cy: \"11\", r: \"2\", key: \"xmgehs\" }]\n]);\n\nexport { PenTool as default };\n//# sourceMappingURL=pen-tool.js.map\n","/**\n * @license lucide-react v0.462.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Wind = createLucideIcon(\"Wind\", [\n  [\"path\", { d: \"M12.8 19.6A2 2 0 1 0 14 16H2\", key: \"148xed\" }],\n  [\"path\", { d: \"M17.5 8a2.5 2.5 0 1 1 2 4H2\", key: \"1u4tom\" }],\n  [\"path\", { d: \"M9.8 4.4A2 2 0 1 1 11 8H2\", key: \"75valh\" }]\n]);\n\nexport { Wind as default };\n//# sourceMappingURL=wind.js.map\n","import React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Calendar as CalendarIcon, Clock, X, Check, Calendar, Bell, Share2 } from 'lucide-react';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { Button } from '@/components/ui/button';\r\nimport * as reminderService from '@/services/reminderService';\r\n\r\ninterface ScheduleModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  meditationTitle: string;\r\n  meditationDuration: string;\r\n  onScheduled: (date: Date, time: string) => void;\r\n}\r\n\r\nconst ScheduleModal: React.FC<ScheduleModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  meditationTitle,\r\n  meditationDuration,\r\n  onScheduled\r\n}) => {\r\n  const { toast } = useToast();\r\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\r\n  const [selectedTime, setSelectedTime] = useState<string>('');\r\n  const [remindMe, setRemindMe] = useState<boolean>(true);\r\n  const [addToCalendar, setAddToCalendar] = useState<boolean>(true);\r\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\r\n  const [hasNotificationPermission, setHasNotificationPermission] = useState<boolean>(false);\r\n\r\n  // Generate time slots\r\n  const generateTimeSlots = () => {\r\n    const slots = [];\r\n    const now = new Date();\r\n    const currentHour = now.getHours();\r\n    const currentMinute = now.getMinutes();\r\n\r\n    // Start from the current hour if today is selected\r\n    const isToday = selectedDate.toDateString() === new Date().toDateString();\r\n    const startHour = isToday ? currentHour : 6; // Start from 6 AM if not today\r\n\r\n    for (let hour = startHour; hour < 24; hour++) {\r\n      const isPM = hour >= 12;\r\n      const hour12 = hour % 12 || 12;\r\n\r\n      // For the current hour, only show future time slots\r\n      const startMinute = (isToday && hour === currentHour) ? Math.ceil(currentMinute / 15) * 15 : 0;\r\n\r\n      for (let minute = startMinute; minute < 60; minute += 15) {\r\n        if (isToday && hour === currentHour && minute <= currentMinute) continue;\r\n\r\n        const formattedMinute = minute.toString().padStart(2, '0');\r\n        const timeString = `${hour12}:${formattedMinute} ${isPM ? 'PM' : 'AM'}`;\r\n        slots.push(timeString);\r\n      }\r\n    }\r\n\r\n    return slots;\r\n  };\r\n\r\n  const timeSlots = generateTimeSlots();\r\n\r\n  // Set default time to 30 minutes from now\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      const now = new Date();\r\n      now.setMinutes(now.getMinutes() + 30);\r\n      const hour = now.getHours() % 12 || 12;\r\n      const minute = Math.ceil(now.getMinutes() / 15) * 15;\r\n      const formattedMinute = (minute % 60).toString().padStart(2, '0');\r\n      const period = now.getHours() >= 12 ? 'PM' : 'AM';\r\n\r\n      setSelectedTime(`${hour}:${formattedMinute} ${period}`);\r\n\r\n      // Check notification permission\r\n      if ('Notification' in window) {\r\n        setHasNotificationPermission(Notification.permission === 'granted');\r\n      }\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Handle date selection\r\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setSelectedDate(new Date(e.target.value));\r\n\r\n    // Reset time slots when date changes\r\n    setSelectedTime('');\r\n  };\r\n\r\n  // Handle time selection\r\n  const handleTimeSelection = (time: string) => {\r\n    setSelectedTime(time);\r\n  };\r\n\r\n  // Request notification permission\r\n  const requestNotificationPermission = async () => {\r\n    if ('Notification' in window) {\r\n      const permission = await Notification.requestPermission();\r\n      setHasNotificationPermission(permission === 'granted');\r\n\r\n      if (permission === 'granted') {\r\n        toast({\r\n          title: \"Notifications Enabled\",\r\n          description: \"You'll receive reminders for your scheduled meditations.\",\r\n        });\r\n      } else {\r\n        toast({\r\n          title: \"Notifications Disabled\",\r\n          description: \"You won't receive reminders for your scheduled meditations.\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add to Google Calendar\r\n  const addToGoogleCalendar = () => {\r\n    if (!selectedDate || !selectedTime) return;\r\n\r\n    // Parse the selected time\r\n    const [timeStr, period] = selectedTime.split(' ');\r\n    const [hourStr, minuteStr] = timeStr.split(':');\r\n    let hour = parseInt(hourStr);\r\n    const minute = parseInt(minuteStr);\r\n\r\n    // Convert to 24-hour format\r\n    if (period === 'PM' && hour !== 12) hour += 12;\r\n    if (period === 'AM' && hour === 12) hour = 0;\r\n\r\n    // Create start and end dates\r\n    const startDate = new Date(selectedDate);\r\n    startDate.setHours(hour, minute, 0, 0);\r\n\r\n    // Parse duration (e.g., \"15 Min\" -> 15)\r\n    const durationMinutes = parseInt(meditationDuration.split(' ')[0]);\r\n\r\n    const endDate = new Date(startDate);\r\n    endDate.setMinutes(endDate.getMinutes() + durationMinutes);\r\n\r\n    // Format dates for Google Calendar URL\r\n    const formatDate = (date: Date) => {\r\n      return date.toISOString().replace(/-|:|\\.\\d+/g, '');\r\n    };\r\n\r\n    const startDateStr = formatDate(startDate);\r\n    const endDateStr = formatDate(endDate);\r\n\r\n    // Create Google Calendar URL\r\n    const url = `https://www.google.com/calendar/render?action=TEMPLATE&text=${encodeURIComponent(`Hushhly: ${meditationTitle}`)}&details=${encodeURIComponent(`${meditationDuration} meditation session`)}&dates=${startDateStr}/${endDateStr}&ctz=${encodeURIComponent(Intl.DateTimeFormat().resolvedOptions().timeZone)}`;\r\n\r\n    // Open Google Calendar in a new tab\r\n    window.open(url, '_blank');\r\n  };\r\n\r\n  // Handle schedule submission\r\n  const handleSchedule = async () => {\r\n    if (!selectedDate || !selectedTime) {\r\n      toast({\r\n        title: \"Missing Information\",\r\n        description: \"Please select both a date and time for your meditation.\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      // Parse the selected time\r\n      const [timeStr, period] = selectedTime.split(' ');\r\n      const [hourStr, minuteStr] = timeStr.split(':');\r\n      let hour = parseInt(hourStr);\r\n      const minute = parseInt(minuteStr);\r\n\r\n      // Convert to 24-hour format\r\n      if (period === 'PM' && hour !== 12) hour += 12;\r\n      if (period === 'AM' && hour === 12) hour = 0;\r\n\r\n      // Create a date object for the scheduled time\r\n      const scheduledDate = new Date(selectedDate);\r\n      scheduledDate.setHours(hour, minute, 0, 0);\r\n\r\n      // Format date and time for display\r\n      const formattedDate = scheduledDate.toLocaleDateString('en-US', {\r\n        weekday: 'short',\r\n        month: 'short',\r\n        day: 'numeric',\r\n      });\r\n\r\n      const formattedTime = scheduledDate.toLocaleTimeString('en-US', {\r\n        hour: 'numeric',\r\n        minute: '2-digit',\r\n        hour12: true,\r\n      });\r\n\r\n      // Generate a unique ID for this meditation session\r\n      const sessionId = `meditation-${Date.now()}`;\r\n\r\n      // Save to local storage\r\n      const savedSessions = localStorage.getItem('scheduled_meditations') || '[]';\r\n      const sessions = JSON.parse(savedSessions);\r\n\r\n      sessions.push({\r\n        id: sessionId,\r\n        title: meditationTitle,\r\n        duration: meditationDuration,\r\n        date: formattedDate,\r\n        time: formattedTime,\r\n        timestamp: scheduledDate.getTime(),\r\n        completed: false,\r\n      });\r\n\r\n      localStorage.setItem('scheduled_meditations', JSON.stringify(sessions));\r\n\r\n      // Schedule reminder if enabled\r\n      if (remindMe && hasNotificationPermission) {\r\n        reminderService.scheduleReminder(\r\n          sessionId,\r\n          meditationTitle,\r\n          formattedTime,\r\n          formattedDate,\r\n          meditationDuration\r\n        );\r\n      }\r\n\r\n      // Add to Google Calendar if enabled\r\n      if (addToCalendar) {\r\n        addToGoogleCalendar();\r\n      }\r\n\r\n      // Call the onScheduled callback\r\n      onScheduled(scheduledDate, formattedTime);\r\n\r\n      // Show success toast\r\n      toast({\r\n        title: \"Meditation Scheduled\",\r\n        description: `${meditationTitle} scheduled for ${formattedDate} at ${formattedTime}.`,\r\n      });\r\n\r\n      // Close the modal\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error scheduling meditation:', error);\r\n      toast({\r\n        title: \"Scheduling Failed\",\r\n        description: \"There was an error scheduling your meditation. Please try again.\",\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\r\n        onClick={onClose}\r\n      >\r\n        <motion.div\r\n          initial={{ scale: 0.9, opacity: 0 }}\r\n          animate={{ scale: 1, opacity: 1 }}\r\n          exit={{ scale: 0.9, opacity: 0 }}\r\n          className=\"bg-white rounded-2xl w-full max-w-md p-6 shadow-xl\"\r\n          onClick={(e) => e.stopPropagation()}\r\n        >\r\n          {/* Header */}\r\n          <div className=\"flex items-center justify-between mb-6\">\r\n            <h2 className=\"text-xl font-bold text-gray-800\">Schedule Meditation</h2>\r\n            <button\r\n              onClick={onClose}\r\n              className=\"p-1 rounded-full hover:bg-gray-100 transition-colors\"\r\n            >\r\n              <X size={20} className=\"text-gray-500\" />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Meditation Info */}\r\n          <div className=\"bg-blue-50 rounded-xl p-4 mb-6\">\r\n            <h3 className=\"font-semibold text-blue-700\">{meditationTitle}</h3>\r\n            <p className=\"text-sm text-blue-600\">{meditationDuration} session</p>\r\n          </div>\r\n\r\n          {/* Date Selection */}\r\n          <div className=\"mb-6\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Select Date\r\n            </label>\r\n            <div className=\"relative\">\r\n              <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\r\n                <CalendarIcon size={16} className=\"text-gray-500\" />\r\n              </div>\r\n              <input\r\n                type=\"date\"\r\n                min={new Date().toISOString().split('T')[0]}\r\n                value={selectedDate.toISOString().split('T')[0]}\r\n                onChange={handleDateChange}\r\n                className=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full pl-10 p-2.5\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Time Selection */}\r\n          <div className=\"mb-6\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n              Select Time\r\n            </label>\r\n            <div className=\"grid grid-cols-4 gap-2 max-h-40 overflow-y-auto\">\r\n              {timeSlots.map((time) => (\r\n                <button\r\n                  key={time}\r\n                  onClick={() => handleTimeSelection(time)}\r\n                  className={`py-2 px-3 text-sm rounded-lg transition-colors ${\r\n                    selectedTime === time\r\n                      ? 'bg-blue-500 text-white'\r\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\r\n                  }`}\r\n                >\r\n                  {time}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Options */}\r\n          <div className=\"space-y-4 mb-6\">\r\n            {/* Reminder Option */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <Bell size={18} className=\"text-gray-700 mr-2\" />\r\n                <span className=\"text-sm text-gray-700\">Remind me</span>\r\n              </div>\r\n              <button\r\n                onClick={() => {\r\n                  if (!hasNotificationPermission && !remindMe) {\r\n                    requestNotificationPermission();\r\n                  }\r\n                  setRemindMe(!remindMe);\r\n                }}\r\n                className={`w-12 h-6 rounded-full transition-colors ${\r\n                  remindMe ? 'bg-blue-500' : 'bg-gray-300'\r\n                } relative`}\r\n              >\r\n                <span\r\n                  className={`absolute top-0.5 left-0.5 bg-white w-5 h-5 rounded-full transition-transform ${\r\n                    remindMe ? 'translate-x-6' : 'translate-x-0'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n\r\n            {/* Google Calendar Option */}\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center\">\r\n                <Calendar size={18} className=\"text-gray-700 mr-2\" />\r\n                <span className=\"text-sm text-gray-700\">Add to Google Calendar</span>\r\n              </div>\r\n              <button\r\n                onClick={() => setAddToCalendar(!addToCalendar)}\r\n                className={`w-12 h-6 rounded-full transition-colors ${\r\n                  addToCalendar ? 'bg-blue-500' : 'bg-gray-300'\r\n                } relative`}\r\n              >\r\n                <span\r\n                  className={`absolute top-0.5 left-0.5 bg-white w-5 h-5 rounded-full transition-transform ${\r\n                    addToCalendar ? 'translate-x-6' : 'translate-x-0'\r\n                  }`}\r\n                />\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"flex space-x-3\">\r\n            <Button\r\n              onClick={onClose}\r\n              variant=\"outline\"\r\n              className=\"flex-1\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              onClick={handleSchedule}\r\n              disabled={isSubmitting || !selectedDate || !selectedTime}\r\n              className=\"flex-1 bg-blue-500 hover:bg-blue-600 text-white\"\r\n            >\r\n              {isSubmitting ? (\r\n                <div className=\"flex items-center justify-center\">\r\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\r\n                  <span>Scheduling...</span>\r\n                </div>\r\n              ) : (\r\n                <div className=\"flex items-center justify-center\">\r\n                  <Check size={16} className=\"mr-2\" />\r\n                  <span>Schedule</span>\r\n                </div>\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </motion.div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default ScheduleModal;\r\n","// 100 different question variations for the meditation AI\n// These questions are designed to create unique user experiences\n\nexport interface MeditationQuestion {\n  id: number;\n  text: string;\n  category: 'general' | 'emotional' | 'physical' | 'mindfulness' | 'gratitude' | 'growth';\n  emoji?: string;\n}\n\nexport const meditationQuestions: MeditationQuestion[] = [\n  // General Questions\n  {\n    id: 1,\n    text: \"Welcome back. Before we begin, how's your heart today?\",\n    category: 'general',\n    emoji: '💗'\n  },\n  {\n    id: 2,\n    text: \"How are you feeling in this moment?\",\n    category: 'general',\n    emoji: '✨'\n  },\n  {\n    id: 3,\n    text: \"What emotions are visiting you today?\",\n    category: 'emotional',\n    emoji: '🌊'\n  },\n  {\n    id: 4,\n    text: \"How is your inner weather today?\",\n    category: 'emotional',\n    emoji: '🌦️'\n  },\n  {\n    id: 5,\n    text: \"What's the temperature of your mind right now?\",\n    category: 'mindfulness',\n    emoji: '🧠'\n  },\n  {\n    id: 6,\n    text: \"How is your energy flowing today?\",\n    category: 'physical',\n    emoji: '⚡'\n  },\n  {\n    id: 7,\n    text: \"What's one word that describes how you feel right now?\",\n    category: 'emotional',\n    emoji: '💭'\n  },\n  {\n    id: 8,\n    text: \"What color would your mood be today?\",\n    category: 'emotional',\n    emoji: '🎨'\n  },\n  {\n    id: 9,\n    text: \"If your feelings were weather, what would the forecast be?\",\n    category: 'emotional',\n    emoji: '☁️'\n  },\n  {\n    id: 10,\n    text: \"How is your body feeling today?\",\n    category: 'physical',\n    emoji: '🧘'\n  },\n  // More Emotional Questions\n  {\n    id: 11,\n    text: \"What emotions have been most present for you today?\",\n    category: 'emotional',\n    emoji: '🌈'\n  },\n  {\n    id: 12,\n    text: \"Is there something specific weighing on your heart today?\",\n    category: 'emotional',\n    emoji: '🪶'\n  },\n  {\n    id: 13,\n    text: \"What's the loudest emotion in your heart right now?\",\n    category: 'emotional',\n    emoji: '📢'\n  },\n  {\n    id: 14,\n    text: \"Are you carrying any emotional weight today that you'd like to set down?\",\n    category: 'emotional',\n    emoji: '🎒'\n  },\n  {\n    id: 15,\n    text: \"How would you describe the rhythm of your emotions today?\",\n    category: 'emotional',\n    emoji: '🎵'\n  },\n  // Mindfulness Questions\n  {\n    id: 16,\n    text: \"On a scale of stormy to peaceful, how is your mind today?\",\n    category: 'mindfulness',\n    emoji: '🌊'\n  },\n  {\n    id: 17,\n    text: \"How present have you been able to be today?\",\n    category: 'mindfulness',\n    emoji: '🎁'\n  },\n  {\n    id: 18,\n    text: \"What's the quality of your attention right now?\",\n    category: 'mindfulness',\n    emoji: '🔍'\n  },\n  {\n    id: 19,\n    text: \"How busy is your mind in this moment?\",\n    category: 'mindfulness',\n    emoji: '🐝'\n  },\n  {\n    id: 20,\n    text: \"What's the pace of your thoughts right now?\",\n    category: 'mindfulness',\n    emoji: '⏱️'\n  },\n  // Physical Awareness Questions\n  {\n    id: 21,\n    text: \"Where in your body do you feel the most tension today?\",\n    category: 'physical',\n    emoji: '💪'\n  },\n  {\n    id: 22,\n    text: \"How is your breathing right now - deep or shallow?\",\n    category: 'physical',\n    emoji: '🫁'\n  },\n  {\n    id: 23,\n    text: \"How rested does your body feel today?\",\n    category: 'physical',\n    emoji: '😴'\n  },\n  {\n    id: 24,\n    text: \"What is your body asking for today?\",\n    category: 'physical',\n    emoji: '👂'\n  },\n  {\n    id: 25,\n    text: \"How connected do you feel to your physical self right now?\",\n    category: 'physical',\n    emoji: '🧵'\n  },\n  // Gratitude Questions\n  {\n    id: 26,\n    text: \"What's one thing you're grateful for in this moment?\",\n    category: 'gratitude',\n    emoji: '🙏'\n  },\n  {\n    id: 27,\n    text: \"Has anything brought you joy today, however small?\",\n    category: 'gratitude',\n    emoji: '✨'\n  },\n  {\n    id: 28,\n    text: \"What's something beautiful you've noticed today?\",\n    category: 'gratitude',\n    emoji: '🌸'\n  },\n  {\n    id: 29,\n    text: \"Is there a moment from today you'd like to treasure?\",\n    category: 'gratitude',\n    emoji: '💎'\n  },\n  {\n    id: 30,\n    text: \"What's nurturing your spirit today?\",\n    category: 'gratitude',\n    emoji: '🌱'\n  },\n  // Growth Questions\n  {\n    id: 31,\n    text: \"What are you learning about yourself today?\",\n    category: 'growth',\n    emoji: '📚'\n  },\n  {\n    id: 32,\n    text: \"What challenge are you facing that might be helping you grow?\",\n    category: 'growth',\n    emoji: '🧗'\n  },\n  {\n    id: 33,\n    text: \"How have you been kind to yourself today?\",\n    category: 'growth',\n    emoji: '❤️'\n  },\n  {\n    id: 34,\n    text: \"What wisdom has today offered you?\",\n    category: 'growth',\n    emoji: '🦉'\n  },\n  {\n    id: 35,\n    text: \"What part of yourself are you discovering today?\",\n    category: 'growth',\n    emoji: '🔍'\n  },\n  // More General Questions\n  {\n    id: 36,\n    text: \"How would you describe your inner landscape right now?\",\n    category: 'general',\n    emoji: '🏞️'\n  },\n  {\n    id: 37,\n    text: \"What's the quality of your presence today?\",\n    category: 'general',\n    emoji: '✨'\n  },\n  {\n    id: 38,\n    text: \"How aligned do you feel with yourself today?\",\n    category: 'general',\n    emoji: '⚖️'\n  },\n  {\n    id: 39,\n    text: \"What's the story your heart is telling today?\",\n    category: 'general',\n    emoji: '📖'\n  },\n  {\n    id: 40,\n    text: \"How would you describe your soul's weather today?\",\n    category: 'general',\n    emoji: '🌦️'\n  },\n  // More Varied Questions\n  {\n    id: 41,\n    text: \"If your heart could speak right now, what would it say?\",\n    category: 'emotional',\n    emoji: '💬'\n  },\n  {\n    id: 42,\n    text: \"What's one thing your body needs right now?\",\n    category: 'physical',\n    emoji: '🧠'\n  },\n  {\n    id: 43,\n    text: \"How connected do you feel to your purpose today?\",\n    category: 'growth',\n    emoji: '🧭'\n  },\n  {\n    id: 44,\n    text: \"What's the tempo of your day been like?\",\n    category: 'general',\n    emoji: '🎵'\n  },\n  {\n    id: 45,\n    text: \"What's one thing you'd like to release before our meditation?\",\n    category: 'mindfulness',\n    emoji: '🕊️'\n  },\n  {\n    id: 46,\n    text: \"How would you describe the texture of your thoughts today?\",\n    category: 'mindfulness',\n    emoji: '🧶'\n  },\n  {\n    id: 47,\n    text: \"What's one sensation you're aware of in your body right now?\",\n    category: 'physical',\n    emoji: '👐'\n  },\n  {\n    id: 48,\n    text: \"What's the quality of your breath today?\",\n    category: 'physical',\n    emoji: '💨'\n  },\n  {\n    id: 49,\n    text: \"What emotion is asking for your attention right now?\",\n    category: 'emotional',\n    emoji: '🔔'\n  },\n  {\n    id: 50,\n    text: \"How would you describe your relationship with yourself today?\",\n    category: 'growth',\n    emoji: '🤝'\n  },\n  // More Creative Questions\n  {\n    id: 51,\n    text: \"If your day was a landscape, what would it look like?\",\n    category: 'general',\n    emoji: '🏞️'\n  },\n  {\n    id: 52,\n    text: \"If your emotions were music, what would be playing right now?\",\n    category: 'emotional',\n    emoji: '🎵'\n  },\n  {\n    id: 53,\n    text: \"What season does your heart feel like it's in?\",\n    category: 'emotional',\n    emoji: '🍂'\n  },\n  {\n    id: 54,\n    text: \"If your mind was a room, how would you describe it right now?\",\n    category: 'mindfulness',\n    emoji: '🏠'\n  },\n  {\n    id: 55,\n    text: \"What animal reflects your energy today?\",\n    category: 'general',\n    emoji: '🦋'\n  },\n  // Specific Emotional Check-ins\n  {\n    id: 56,\n    text: \"How is anxiety showing up for you today, if at all?\",\n    category: 'emotional',\n    emoji: '😰'\n  },\n  {\n    id: 57,\n    text: \"Where are you finding peace today?\",\n    category: 'emotional',\n    emoji: '☮️'\n  },\n  {\n    id: 58,\n    text: \"How is your heart holding joy today?\",\n    category: 'emotional',\n    emoji: '🎉'\n  },\n  {\n    id: 59,\n    text: \"What's the quality of your sadness today, if present?\",\n    category: 'emotional',\n    emoji: '💧'\n  },\n  {\n    id: 60,\n    text: \"How is your confidence feeling today?\",\n    category: 'emotional',\n    emoji: '💪'\n  },\n  // Mindful Awareness Questions\n  {\n    id: 61,\n    text: \"What are you noticing about your thoughts right now?\",\n    category: 'mindfulness',\n    emoji: '💭'\n  },\n  {\n    id: 62,\n    text: \"How present are you feeling in your body right now?\",\n    category: 'mindfulness',\n    emoji: '🧘'\n  },\n  {\n    id: 63,\n    text: \"What's one thing you can sense with each of your five senses right now?\",\n    category: 'mindfulness',\n    emoji: '👁️'\n  },\n  {\n    id: 64,\n    text: \"How would you describe your relationship with the present moment?\",\n    category: 'mindfulness',\n    emoji: '⏱️'\n  },\n  {\n    id: 65,\n    text: \"What's one thing you're aware of that you weren't aware of yesterday?\",\n    category: 'mindfulness',\n    emoji: '💡'\n  },\n  // Relationship Questions\n  {\n    id: 66,\n    text: \"How connected do you feel to others today?\",\n    category: 'general',\n    emoji: '🤲'\n  },\n  {\n    id: 67,\n    text: \"What's one relationship that's nurturing you right now?\",\n    category: 'gratitude',\n    emoji: '💞'\n  },\n  {\n    id: 68,\n    text: \"How are you showing up in your relationships today?\",\n    category: 'growth',\n    emoji: '🌟'\n  },\n  {\n    id: 69,\n    text: \"What's one boundary you're honoring today?\",\n    category: 'growth',\n    emoji: '🛡️'\n  },\n  {\n    id: 70,\n    text: \"How is your heart feeling about your closest connections?\",\n    category: 'emotional',\n    emoji: '❤️'\n  },\n  // Purpose and Meaning Questions\n  {\n    id: 71,\n    text: \"What's giving your day meaning today?\",\n    category: 'growth',\n    emoji: '✨'\n  },\n  {\n    id: 72,\n    text: \"How aligned do you feel with your purpose right now?\",\n    category: 'growth',\n    emoji: '🧭'\n  },\n  {\n    id: 73,\n    text: \"What values are you honoring today?\",\n    category: 'growth',\n    emoji: '🏆'\n  },\n  {\n    id: 74,\n    text: \"What's one small way you're making a difference today?\",\n    category: 'gratitude',\n    emoji: '🌱'\n  },\n  {\n    id: 75,\n    text: \"What's one thing that feels meaningful to you right now?\",\n    category: 'growth',\n    emoji: '💎'\n  },\n  // Balance Questions\n  {\n    id: 76,\n    text: \"How balanced does your energy feel today?\",\n    category: 'physical',\n    emoji: '⚖️'\n  },\n  {\n    id: 77,\n    text: \"What area of your life needs more attention right now?\",\n    category: 'growth',\n    emoji: '🔍'\n  },\n  {\n    id: 78,\n    text: \"How are you balancing giving and receiving today?\",\n    category: 'growth',\n    emoji: '🔄'\n  },\n  {\n    id: 79,\n    text: \"What's one way you could bring more harmony to your day?\",\n    category: 'growth',\n    emoji: '☯️'\n  },\n  {\n    id: 80,\n    text: \"How are you honoring both your strengths and vulnerabilities today?\",\n    category: 'growth',\n    emoji: '🦋'\n  },\n  // Transition Questions\n  {\n    id: 81,\n    text: \"What are you in the process of letting go of?\",\n    category: 'growth',\n    emoji: '🍃'\n  },\n  {\n    id: 82,\n    text: \"What new beginning are you experiencing or hoping for?\",\n    category: 'growth',\n    emoji: '🌅'\n  },\n  {\n    id: 83,\n    text: \"What's transforming within you right now?\",\n    category: 'growth',\n    emoji: '🦋'\n  },\n  {\n    id: 84,\n    text: \"What chapter of your life are you currently in?\",\n    category: 'growth',\n    emoji: '📖'\n  },\n  {\n    id: 85,\n    text: \"What's one thing that's changing in your inner landscape?\",\n    category: 'growth',\n    emoji: '🌊'\n  },\n  // Intention Questions\n  {\n    id: 86,\n    text: \"What intention would you like to set for our time together?\",\n    category: 'mindfulness',\n    emoji: '🧭'\n  },\n  {\n    id: 87,\n    text: \"What quality would you like to cultivate in yourself today?\",\n    category: 'growth',\n    emoji: '🌱'\n  },\n  {\n    id: 88,\n    text: \"What's one thing you'd like to invite more of into your life?\",\n    category: 'growth',\n    emoji: '✨'\n  },\n  {\n    id: 89,\n    text: \"What would you like to focus on during our meditation today?\",\n    category: 'mindfulness',\n    emoji: '🔍'\n  },\n  {\n    id: 90,\n    text: \"What's one small shift you'd like to make today?\",\n    category: 'growth',\n    emoji: '🔄'\n  },\n  // Final Set of Varied Questions\n  {\n    id: 91,\n    text: \"How would you describe the landscape of your heart today?\",\n    category: 'emotional',\n    emoji: '💗'\n  },\n  {\n    id: 92,\n    text: \"What's one thing your body is communicating to you right now?\",\n    category: 'physical',\n    emoji: '👂'\n  },\n  {\n    id: 93,\n    text: \"What's the most alive part of you today?\",\n    category: 'general',\n    emoji: '✨'\n  },\n  {\n    id: 94,\n    text: \"What's one truth you're holding today?\",\n    category: 'growth',\n    emoji: '💎'\n  },\n  {\n    id: 95,\n    text: \"How is your spirit feeling today?\",\n    category: 'general',\n    emoji: '🕊️'\n  },\n  {\n    id: 96,\n    text: \"What's one thing you're curious about today?\",\n    category: 'growth',\n    emoji: '🔍'\n  },\n  {\n    id: 97,\n    text: \"How would you describe your relationship with uncertainty today?\",\n    category: 'growth',\n    emoji: '❓'\n  },\n  {\n    id: 98,\n    text: \"What's one way you've shown yourself compassion today?\",\n    category: 'growth',\n    emoji: '❤️'\n  },\n  {\n    id: 99,\n    text: \"What's the quality of your hope today?\",\n    category: 'emotional',\n    emoji: '🌈'\n  },\n  {\n    id: 100,\n    text: \"Before we begin our meditation, what's in your heart right now?\",\n    category: 'emotional',\n    emoji: '💗'\n  }\n];\n\n// Function to get a random question\nexport const getRandomQuestion = (): MeditationQuestion => {\n  const randomIndex = Math.floor(Math.random() * meditationQuestions.length);\n  return meditationQuestions[randomIndex];\n};\n\n// Function to get a random question from a specific category\nexport const getRandomQuestionByCategory = (category: MeditationQuestion['category']): MeditationQuestion => {\n  const categoryQuestions = meditationQuestions.filter(q => q.category === category);\n  const randomIndex = Math.floor(Math.random() * categoryQuestions.length);\n  return categoryQuestions[randomIndex];\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport { X, Send, Sparkles, MessageSquare, ArrowLeft, Heart, Wind, Brain, Moon, Mic, MicOff, Volume2, VolumeX,\n  Cloud, Flower, Droplets, Sun, Calendar, PenTool, Clock } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport ScheduleModal from './ScheduleModal';\nimport BearMascot from './BearMascot';\nimport MoodSelector from './MoodSelector';\nimport { getRandomQuestion } from '@/data/meditationQuestions';\n\ninterface MeditationChatProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ninterface ChatMessage {\n  id: string;\n  content: string;\n  sender: 'user' | 'ai';\n  timestamp: number;\n  type?: 'text' | 'breathing' | 'meditation' | 'reflection';\n  breathingCue?: 'inhale' | 'hold' | 'exhale' | 'rest';\n  duration?: number;\n  suggestions?: string[];\n  emotion?: 'sad' | 'anxious' | 'grateful' | 'tired' | 'energized' | 'neutral';\n  showHugAnimation?: boolean;\n}\n\nconst MeditationChat: React.FC<MeditationChatProps> = ({ isOpen, onClose }) => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const userId = user?.id || 'guest';\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputValue, setInputValue] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const [audioEnabled, setAudioEnabled] = useState(false);\n  const [isMeditating, setIsMeditating] = useState(false);\n  const [currentBreathPhase, setCurrentBreathPhase] = useState<'inhale' | 'hold' | 'exhale' | 'rest'>('rest');\n  const [showScheduleModal, setShowScheduleModal] = useState(false);\n  const [showReflectionCard, setShowReflectionCard] = useState(false);\n  const [reflectionText, setReflectionText] = useState('');\n  const [meditationTitle, setMeditationTitle] = useState('Personalized Meditation');\n  const [meditationDuration, setMeditationDuration] = useState('10 Min');\n  const [currentEmotion, setCurrentEmotion] = useState<'sad' | 'anxious' | 'grateful' | 'tired' | 'energized' | 'neutral'>('neutral');\n  const [showHugAnimation, setShowHugAnimation] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // State for bear mascot\n  const [showBearMascot, setShowBearMascot] = useState(true);\n  const [bearEmotion, setBearEmotion] = useState<'happy' | 'calm' | 'thinking' | 'listening'>('happy');\n  const [bearMessage, setBearMessage] = useState(\"Hi there! I'm Hushhly Bear, your meditation companion.\");\n\n  // State for welcome question\n  const [welcomeQuestion, setWelcomeQuestion] = useState(getRandomQuestion().text);\n\n  // Load chat history on component mount\n  useEffect(() => {\n    if (isOpen) {\n      // Show bear mascot first, then add welcome message after animation\n      setShowBearMascot(true);\n\n      // After 3 seconds, show the welcome message\n      setTimeout(() => {\n        // Add a welcome message with the Hushhly personality using a random question\n        const welcomeMessage: ChatMessage = {\n          id: generateId(),\n          content: welcomeQuestion,\n          sender: 'ai',\n          timestamp: Date.now(),\n          type: 'text',\n          suggestions: ['I feel anxious', 'I feel tired', 'I feel grateful', 'I need to focus'],\n          emotion: 'neutral'\n        };\n        setMessages([welcomeMessage]);\n        setBearEmotion('listening');\n        setBearMessage(\"How are you feeling today? I'm here to listen and help you find peace.\");\n      }, 3000);\n    }\n  }, [isOpen]);\n\n  // Scroll to bottom when messages change\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Handle breathing cues during meditation\n  useEffect(() => {\n    let breathTimer: NodeJS.Timeout;\n\n    if (isMeditating) {\n      const runBreathCycle = () => {\n        // Inhale for 4 seconds\n        setCurrentBreathPhase('inhale');\n        addBreathingCue('inhale');\n\n        breathTimer = setTimeout(() => {\n          // Hold for 4 seconds\n          setCurrentBreathPhase('hold');\n          addBreathingCue('hold');\n\n          breathTimer = setTimeout(() => {\n            // Exhale for 6 seconds\n            setCurrentBreathPhase('exhale');\n            addBreathingCue('exhale');\n\n            breathTimer = setTimeout(() => {\n              // Rest for 2 seconds\n              setCurrentBreathPhase('rest');\n\n              breathTimer = setTimeout(() => {\n                // Repeat the cycle\n                runBreathCycle();\n              }, 2000);\n            }, 6000);\n          }, 4000);\n        }, 4000);\n      };\n\n      runBreathCycle();\n    }\n\n    return () => {\n      if (breathTimer) clearTimeout(breathTimer);\n    };\n  }, [isMeditating]);\n\n  const generateId = (): string => {\n    return Math.random().toString(36).substring(2, 15);\n  };\n\n  const addBreathingCue = (phase: 'inhale' | 'hold' | 'exhale' | 'rest') => {\n    if (phase === 'rest') return; // Don't add message for rest phase\n\n    // More poetic breathing guidance\n    const breathingContent = phase === 'inhale'\n      ? '[breathe in...] Receive this breath as nourishment'\n      : phase === 'hold'\n        ? '[hold...] Feel the stillness within'\n        : '[breathe out...] Release what no longer serves you';\n\n    const cueMessage: ChatMessage = {\n      id: generateId(),\n      content: breathingContent,\n      sender: 'ai',\n      timestamp: Date.now(),\n      type: 'breathing',\n      breathingCue: phase,\n      duration: phase === 'inhale' ? 4 : phase === 'hold' ? 4 : 6,\n      emotion: currentEmotion\n    };\n\n    setMessages(prev => [...prev, cueMessage]);\n  };\n\n  const handleSendMessage = () => {\n    if (inputValue.trim() === '') return;\n\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      content: inputValue,\n      sender: 'user',\n      timestamp: Date.now(),\n      type: 'text'\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputValue('');\n\n    // Show typing indicator\n    setIsTyping(true);\n\n    // Generate AI response with a slight delay to simulate thinking\n    setTimeout(() => {\n      const aiResponse = generateAIResponse(userMessage.content);\n      setMessages(prev => [...prev, aiResponse]);\n      setIsTyping(false);\n\n      // If the response is a meditation start, begin the meditation\n      if (aiResponse.type === 'meditation') {\n        setIsMeditating(true);\n      }\n    }, 1500);\n  };\n\n  const handleVoiceInput = () => {\n    if (!isListening) {\n      // Start listening\n      setIsListening(true);\n\n      // Check if browser supports speech recognition\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n        const recognition = new SpeechRecognition();\n\n        recognition.lang = 'en-US';\n        recognition.continuous = false;\n        recognition.interimResults = false;\n\n        recognition.onresult = (event) => {\n          const transcript = event.results[0][0].transcript;\n          setInputValue(transcript);\n          setIsListening(false);\n\n          // Automatically send the message after voice input\n          setTimeout(() => {\n            if (transcript.trim() !== '') {\n              const userMessage: ChatMessage = {\n                id: generateId(),\n                content: transcript,\n                sender: 'user',\n                timestamp: Date.now(),\n                type: 'text'\n              };\n\n              setMessages(prev => [...prev, userMessage]);\n              setInputValue('');\n\n              // Show typing indicator\n              setIsTyping(true);\n\n              // Generate AI response\n              setTimeout(() => {\n                const aiResponse = generateAIResponse(transcript);\n                setMessages(prev => [...prev, aiResponse]);\n                setIsTyping(false);\n\n                // If the response is a meditation start, begin the meditation\n                if (aiResponse.type === 'meditation') {\n                  setIsMeditating(true);\n                }\n              }, 1500);\n            }\n          }, 500);\n        };\n\n        recognition.onerror = (event) => {\n          console.error('Speech recognition error', event.error);\n          setIsListening(false);\n\n          toast({\n            title: \"Voice Recognition Error\",\n            description: \"We couldn't process your voice. Please try again or type your message.\",\n            duration: 3000,\n          });\n        };\n\n        recognition.onend = () => {\n          setIsListening(false);\n        };\n\n        recognition.start();\n      } else {\n        toast({\n          title: \"Voice Recognition Not Supported\",\n          description: \"Your browser doesn't support voice recognition. Please type your message instead.\",\n          duration: 3000,\n        });\n        setIsListening(false);\n      }\n    } else {\n      // Stop listening\n      setIsListening(false);\n\n      if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n        const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n        const recognition = new SpeechRecognition();\n        recognition.stop();\n      }\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    // Add user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      content: suggestion,\n      sender: 'user',\n      timestamp: Date.now(),\n      type: 'text'\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n\n    // Show typing indicator\n    setIsTyping(true);\n\n    // Generate AI response with a slight delay\n    setTimeout(() => {\n      const aiResponse = generateAIResponse(suggestion);\n      setMessages(prev => [...prev, aiResponse]);\n      setIsTyping(false);\n\n      // If the response is a meditation start, begin the meditation\n      if (aiResponse.type === 'meditation') {\n        setIsMeditating(true);\n      }\n    }, 1500);\n  };\n\n  const generateAIResponse = (userMessage: string): ChatMessage => {\n    const lowerMessage = userMessage.toLowerCase();\n    let responseContent = '';\n    let suggestions: string[] = [];\n    let messageType: 'text' | 'breathing' | 'meditation' | 'reflection' = 'text';\n    let showHug = false;\n\n    // Detect emotion in user message\n    const emotion = detectEmotion(lowerMessage);\n\n    // Update bear emotion based on user message\n    if (emotion === 'sad' || emotion === 'anxious') {\n      setBearEmotion('calm');\n      setBearMessage(\"I understand how you feel. Let's take a moment to breathe together.\");\n      showHug = true;\n      setTimeout(() => {\n        setShowHugAnimation(true);\n        setTimeout(() => setShowHugAnimation(false), 3000);\n      }, 500);\n    } else if (emotion === 'grateful' || emotion === 'energized') {\n      setBearEmotion('happy');\n      setBearMessage(\"That's wonderful! I'm happy to hear that. Let's build on this positive energy.\");\n    } else if (emotion === 'tired') {\n      setBearEmotion('thinking');\n      setBearMessage(\"I understand. Let's find a gentle practice that respects your energy levels today.\");\n    } else {\n      setBearEmotion('listening');\n      setBearMessage(\"I'm here with you. How can I support your meditation practice today?\");\n    }\n\n    // Check for keywords and generate appropriate response with more poetic, soulful language\n    if (lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('hey')) {\n      responseContent = \"I'm here with you. [pause]\\nHow is your inner landscape today? I'm listening with my full presence.\";\n      suggestions = ['I feel anxious', 'I feel tired', 'I feel grateful', 'I need to focus'];\n    }\n    else if (lowerMessage.includes('anxious') || lowerMessage.includes('anxiety') || lowerMessage.includes('worried') || lowerMessage.includes('stress')) {\n      responseContent = \"I feel that anxiety with you. [pause]\\nLike ripples on water, these feelings move through you but aren't the whole of who you are. [pause]\\nWhere in your body do you feel this anxiety most strongly right now? [pause]\\nWould you like to try a gentle breathing practice to help ground your nervous system?\";\n      suggestions = ['Yes, help me breathe', 'In my chest/stomach', 'I need something quick', 'I want to schedule a session'];\n      setMeditationTitle('Anxiety Relief Meditation');\n    }\n    else if (lowerMessage.includes('tired') || lowerMessage.includes('exhausted') || lowerMessage.includes('no energy')) {\n      responseContent = \"I hear the weariness in your words. [pause]\\nYour body carries so much wisdom when it asks for rest. [pause]\\nLet's honor that together with some gentle renewal. [pause]\\nWould you like a soft energizing practice, or something to help you surrender more deeply to rest?\";\n      suggestions = ['Gentle energy renewal', 'Help me rest deeply', 'I need better sleep', 'Why am I always tired?'];\n      setMeditationTitle('Energy Renewal Meditation');\n    }\n    else if (lowerMessage.includes('sad') || lowerMessage.includes('depressed') || lowerMessage.includes('down')) {\n      responseContent = \"I'm sitting with your sadness. [pause]\\nEmotions flow through us like weather patterns—sometimes stormy, sometimes clear. [pause]\\nYour feelings are valid and worthy of gentle attention. [pause]\\nWould you like to explore a meditation that offers a soft holding space for whatever you're experiencing?\";\n      suggestions = ['Yes, hold space for me', 'How can meditation help sadness?', 'I want to talk more', 'Schedule a session'];\n      setMeditationTitle('Emotional Comfort Meditation');\n    }\n    else if (lowerMessage.includes('happy') || lowerMessage.includes('grateful') || lowerMessage.includes('good')) {\n      responseContent = \"What a beautiful energy you're carrying today. [pause]\\nGratitude is like sunlight for the soul—it illuminates everything it touches. [pause]\\nWould you like to amplify this feeling, letting it sink deeper into your being with a gratitude practice?\";\n      suggestions = ['Yes, deepen this feeling', 'How to maintain this state', 'I want something different', 'Schedule for later'];\n      setMeditationTitle('Gratitude Amplification');\n    }\n    else if (lowerMessage.includes('focus') || lowerMessage.includes('concentrate') || lowerMessage.includes('distracted')) {\n      responseContent = \"Finding focus can be challenging in our busy world. [pause]\\nYour awareness of needing concentration is already a mindful step. [pause]\\nWould you like a short meditation to help clear your mind and sharpen your attention?\";\n      suggestions = ['Yes, help me focus', 'Quick concentration tips', 'I need a longer session', 'Schedule for later'];\n      setMeditationTitle('Focus Enhancement');\n    }\n    else if (lowerMessage.includes('sleep') || lowerMessage.includes('insomnia') || lowerMessage.includes('can\\'t sleep')) {\n      responseContent = \"The night can feel so long when sleep won't come. [pause]\\nYour body and mind are seeking that sweet surrender to rest. [pause]\\nWould you like a gentle meditation to help prepare your whole being for deep, nourishing sleep?\";\n      suggestions = ['Yes, guide me to sleep', 'Tips for better sleep', 'I need something now', 'Schedule for bedtime'];\n      setMeditationTitle('Sleep Preparation');\n    }\n    else if (lowerMessage.includes('yes') && (lowerMessage.includes('meditation') || lowerMessage.includes('breathe') || lowerMessage.includes('help') || lowerMessage.includes('focus'))) {\n      // User wants to start meditation\n      responseContent = \"Let's begin this journey together. [pause]\\nFind a position where your body feels supported and at ease. [pause]\\nI'll guide you with my voice as we move through this practice. [pause]\\nLet's start by arriving fully in this moment with a deep, nourishing breath. [breathe in]... [pause]... [breathe out]...\";\n      messageType = 'meditation';\n      suggestions = [];\n    }\n    else if (lowerMessage.includes('schedule') || lowerMessage.includes('later') || lowerMessage.includes('reminder')) {\n      responseContent = \"I'd be honored to reserve this time for your future self. [pause]\\nWhen would feel most nurturing for you to return to this practice?\";\n      suggestions = ['This evening', 'Tomorrow morning', 'Set a custom time', 'Never mind'];\n    }\n    else if (lowerMessage.includes('evening') || lowerMessage.includes('tonight')) {\n      responseContent = \"Evening practice can be so beautiful—a gentle transition between the day's activities and the night's rest. [pause]\\nBefore we schedule, would you like to capture a reflection about how you're feeling in this moment?\";\n      suggestions = ['Yes, save a reflection', 'No, just schedule', 'Cancel scheduling'];\n\n      // Show schedule modal\n      setTimeout(() => {\n        setShowScheduleModal(true);\n      }, 1000);\n    }\n    else if (lowerMessage.includes('morning') || lowerMessage.includes('tomorrow')) {\n      responseContent = \"Morning meditation can set such a beautiful tone for your day. [pause]\\nBefore we schedule, would you like to save a reflection about how you're feeling right now, to revisit tomorrow?\";\n      suggestions = ['Yes, save a reflection', 'No, just schedule', 'Cancel scheduling'];\n\n      // Show schedule modal\n      setTimeout(() => {\n        setShowScheduleModal(true);\n      }, 1000);\n    }\n    else if (lowerMessage.includes('reflection') || lowerMessage.includes('save')) {\n      responseContent = \"I've saved your reflection like a precious moment in time. [pause]\\nThese breadcrumbs of your journey can reveal such beautiful patterns when revisited. [pause]\\nYour meditation has been scheduled with care.\";\n      suggestions = ['Thank you', 'Start a meditation now', 'Tell me more about reflections'];\n\n      // Simulate saving reflection to backend\n      setTimeout(() => {\n        toast({\n          title: \"Reflection Saved\",\n          description: \"Your emotional reflection has been saved to your journal.\",\n          duration: 3000,\n        });\n      }, 1000);\n\n      messageType = 'reflection';\n    }\n    else {\n      // Default response for other messages\n      responseContent = \"I'm here with you on this meditation journey. [pause]\\nWould you like to explore a practice tailored to how you're feeling right now, or would you prefer guidance on a specific aspect of meditation?\";\n      suggestions = ['Start a meditation', 'Help with anxiety', 'Help with focus', 'Help with sleep'];\n    }\n\n    return {\n      id: generateId(),\n      content: responseContent,\n      sender: 'ai',\n      timestamp: Date.now(),\n      type: messageType,\n      suggestions,\n      emotion,\n      showHugAnimation: showHug\n    };\n  };\n\n  const detectEmotion = (message: string): 'sad' | 'anxious' | 'grateful' | 'tired' | 'energized' | 'neutral' => {\n    // Simple keyword-based emotion detection\n    if (message.includes('anxious') || message.includes('anxiety') || message.includes('worried') || message.includes('stress')) {\n      setCurrentEmotion('anxious');\n      return 'anxious';\n    } else if (message.includes('tired') || message.includes('exhausted') || message.includes('no energy')) {\n      setCurrentEmotion('tired');\n      return 'tired';\n    } else if (message.includes('sad') || message.includes('depressed') || message.includes('down')) {\n      setCurrentEmotion('sad');\n      return 'sad';\n    } else if (message.includes('happy') || message.includes('grateful') || message.includes('good') || message.includes('thankful')) {\n      setCurrentEmotion('grateful');\n      return 'grateful';\n    } else if (message.includes('energetic') || message.includes('energized') || message.includes('motivated') || message.includes('excited')) {\n      setCurrentEmotion('energized');\n      return 'energized';\n    } else if (message.includes('focus') || message.includes('concentrate') || message.includes('distracted')) {\n      // For focus issues, we'll use the 'neutral' emotion but provide focused guidance\n      setCurrentEmotion('neutral');\n      return 'neutral';\n    } else if (message.includes('sleep') || message.includes('insomnia')) {\n      // For sleep issues, we'll use the 'tired' emotion\n      setCurrentEmotion('tired');\n      return 'tired';\n    } else {\n      setCurrentEmotion('neutral');\n      return 'neutral';\n    }\n  };\n\n  const handleEndMeditation = () => {\n    setIsMeditating(false);\n\n    // Update bear emotion\n    setBearEmotion('happy');\n    setBearMessage(\"Wonderful job! How do you feel after that meditation? I'm here to help you reflect on your experience.\");\n\n    // Add more soulful completion message\n    const completionMessage: ChatMessage = {\n      id: generateId(),\n      content: \"Gently returning to this moment. [pause]\\nTake your time to notice any shifts in your inner landscape. [pause]\\nHow does your heart feel now? Would you like to capture this feeling in a reflection, or schedule your next moment of connection?\",\n      sender: 'ai',\n      timestamp: Date.now(),\n      type: 'text',\n      suggestions: ['Save a reflection', 'Schedule next session', 'I feel more peaceful', 'I need more guidance'],\n      emotion: 'grateful'\n    };\n\n    setMessages(prev => [...prev, completionMessage]);\n\n    // Show reflection card after a short delay\n    setTimeout(() => {\n      setShowReflectionCard(true);\n    }, 1500);\n  };\n\n  // Function to handle schedule completion\n  const handleScheduleComplete = (scheduledDate: Date, scheduledTime: string) => {\n    setShowScheduleModal(false);\n\n    // Add scheduling confirmation message\n    const schedulingMessage: ChatMessage = {\n      id: generateId(),\n      content: `I've scheduled your ${meditationTitle} for ${scheduledTime}. I'll send you a reminder before the session.`,\n      sender: 'ai',\n      timestamp: Date.now(),\n      type: 'text',\n      suggestions: ['Thank you', 'Start a meditation now', 'Cancel this schedule']\n    };\n\n    setMessages(prev => [...prev, schedulingMessage]);\n\n    // Show toast notification\n    toast({\n      title: \"Meditation Scheduled\",\n      description: `Your ${meditationTitle} has been scheduled for ${scheduledTime}.`,\n      duration: 3000,\n    });\n  };\n\n\n\n  const handleSaveReflection = () => {\n    if (reflectionText.trim() === '') {\n      toast({\n        title: \"Reflection Empty\",\n        description: \"Please write a short reflection before saving.\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    // Add more poetic reflection message\n    const reflectionMessage: ChatMessage = {\n      id: generateId(),\n      content: `I've saved your reflection like a precious stone in the river of your journey. [pause]\\nThese moments of awareness create a beautiful mosaic over time, revealing the patterns of your growth and healing. [pause]\\nThank you for sharing this piece of your heart.`,\n      sender: 'ai',\n      timestamp: Date.now(),\n      type: 'reflection',\n      suggestions: ['Thank you for holding space', 'Schedule next session', 'Start another meditation'],\n      emotion: 'grateful'\n    };\n\n    setMessages(prev => [...prev, reflectionMessage]);\n    setShowReflectionCard(false);\n\n    // Simulate saving reflection to backend\n    toast({\n      title: \"Reflection Saved\",\n      description: \"Your emotional reflection has been saved to your journal.\",\n      duration: 3000,\n    });\n\n    // Show schedule modal after saving reflection\n    setTimeout(() => {\n      setShowScheduleModal(true);\n    }, 1000);\n  };\n\n\n\n  if (!isOpen) return null;\n\n  // Determine background gradient based on emotion\n  const getEmotionBackground = () => {\n    switch (currentEmotion) {\n      case 'sad':\n        return 'from-blue-700 to-indigo-900 bg-opacity-70'; // Foggy blue\n      case 'anxious':\n        return 'from-indigo-800 to-purple-900'; // Dim purple that brightens\n      case 'grateful':\n        return 'from-green-600 to-teal-800'; // Blooming green\n      case 'tired':\n        return 'from-blue-800 to-indigo-900'; // Soft blue clouds\n      case 'energized':\n        return 'from-amber-600 to-orange-800'; // Golden particles\n      default:\n        return 'from-indigo-500 to-purple-600'; // Default purple (matching screenshot)\n    }\n  };\n\n  // Get animation elements based on emotion\n  const getEmotionAnimations = () => {\n    switch (currentEmotion) {\n      case 'sad':\n        return (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none bg-blue-500/5 backdrop-blur-sm\"\n            animate={{ opacity: [0.2, 0.4, 0.2] }}\n            transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n        );\n      case 'anxious':\n        return (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none\"\n            animate={{\n              backgroundColor: ['rgba(76, 29, 149, 0.1)', 'rgba(76, 29, 149, 0.2)', 'rgba(76, 29, 149, 0.1)']\n            }}\n            transition={{ duration: 4, repeat: Infinity, ease: \"easeInOut\" }}\n          />\n        );\n      case 'grateful':\n        return (\n          <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n            {[...Array(12)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-8 h-8 bg-green-300/20 rounded-full\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  top: `${Math.random() * 100}%`,\n                }}\n                initial={{ scale: 0, rotate: 0 }}\n                animate={{\n                  scale: [0, 1, 0],\n                  rotate: [0, 90],\n                  opacity: [0, 0.7, 0]\n                }}\n                transition={{\n                  duration: 8,\n                  delay: i * 0.5,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              />\n            ))}\n          </div>\n        );\n      case 'tired':\n        return (\n          <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n            {[...Array(5)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-20 h-10 bg-blue-200/10 rounded-full blur-md\"\n                style={{\n                  left: `${-10 + (i * 25)}%`,\n                  top: `${20 + (i * 10)}%`,\n                }}\n                animate={{\n                  x: ['0%', '100%'],\n                  opacity: [0.3, 0.7, 0.3]\n                }}\n                transition={{\n                  duration: 15 + (i * 5),\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n              />\n            ))}\n          </div>\n        );\n      case 'energized':\n        return (\n          <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n            {[...Array(20)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-2 h-2 bg-amber-300/30 rounded-full\"\n                style={{\n                  left: `${Math.random() * 100}%`,\n                  bottom: '0%',\n                }}\n                animate={{\n                  y: [0, -Math.random() * 300 - 100],\n                  opacity: [0, 0.8, 0]\n                }}\n                transition={{\n                  duration: 4 + (Math.random() * 3),\n                  delay: i * 0.2,\n                  repeat: Infinity,\n                  ease: \"easeOut\"\n                }}\n              />\n            ))}\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  // Add a function to handle emotion selection from the MoodSelector\n  const handleEmotionSelect = (mood: string) => {\n    // Map the mood to the appropriate emotion and message\n    switch (mood) {\n      case 'anxious':\n        setCurrentEmotion('anxious');\n        handleSuggestionClick('I feel anxious');\n        setBearEmotion('calm');\n        break;\n      case 'tired':\n        setCurrentEmotion('tired');\n        handleSuggestionClick('I feel tired');\n        setBearEmotion('thinking');\n        break;\n      case 'sad':\n        setCurrentEmotion('sad');\n        handleSuggestionClick('I feel sad');\n        setBearEmotion('calm');\n        break;\n      case 'grateful':\n        setCurrentEmotion('grateful');\n        handleSuggestionClick('I feel grateful');\n        setBearEmotion('happy');\n        break;\n      case 'happy':\n        setCurrentEmotion('grateful');\n        handleSuggestionClick('I feel happy');\n        setBearEmotion('happy');\n        break;\n      case 'calm':\n        setCurrentEmotion('neutral');\n        handleSuggestionClick('I feel calm');\n        setBearEmotion('calm');\n        break;\n      case 'focus':\n        setCurrentEmotion('neutral');\n        handleSuggestionClick('I need to focus');\n        setBearEmotion('thinking');\n        break;\n      case 'motivated':\n        setCurrentEmotion('energized');\n        handleSuggestionClick('I feel motivated');\n        setBearEmotion('happy');\n        break;\n      case 'confused':\n        setCurrentEmotion('anxious');\n        handleSuggestionClick('I feel confused');\n        setBearEmotion('thinking');\n        break;\n      case 'frustrated':\n        setCurrentEmotion('anxious');\n        handleSuggestionClick('I feel frustrated');\n        setBearEmotion('thinking');\n        break;\n      case 'loving':\n        setCurrentEmotion('grateful');\n        handleSuggestionClick('I feel loving');\n        setBearEmotion('happy');\n        break;\n      case 'growing':\n        setCurrentEmotion('energized');\n        handleSuggestionClick('I feel like I\\'m growing');\n        setBearEmotion('happy');\n        break;\n      default:\n        setCurrentEmotion('neutral');\n        handleSuggestionClick('I\\'m not sure how I feel');\n        setBearEmotion('thinking');\n    }\n\n    // Get a new random question for next time\n    setWelcomeQuestion(getRandomQuestion().text);\n  };\n\n  // State for emotion selection screen\n  const [showEmotionSelection, setShowEmotionSelection] = useState(true);\n\n  // Hide emotion selection after selecting an emotion\n  useEffect(() => {\n    if (messages.length > 1) {\n      setShowEmotionSelection(false);\n    }\n  }, [messages]);\n\n  return (\n    <div className={`fixed inset-0 z-50 bg-gradient-to-br ${getEmotionBackground()} flex flex-col relative`}>\n      {/* Emotion-based background animations */}\n      {getEmotionAnimations()}\n\n      {/* Emotion Selection Screen */}\n      <AnimatePresence>\n        {showEmotionSelection && (\n          <motion.div\n            className=\"absolute inset-0 bg-gradient-to-b from-purple-600/90 to-indigo-900/90 backdrop-blur-md flex flex-col items-center justify-center p-4 md:p-6 z-30\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <div className=\"absolute top-4 left-4\">\n              <button\n                onClick={onClose}\n                className=\"bg-white/20 backdrop-blur-sm p-2 rounded-full hover:bg-white/30 transition-colors\"\n              >\n                <ArrowLeft size={24} className=\"text-white\" />\n              </button>\n            </div>\n\n            <h2 className=\"text-xl md:text-2xl font-bold text-white mb-6 md:mb-8 text-center\">{welcomeQuestion}</h2>\n\n            {/* Emoji Mood Selector */}\n            <MoodSelector onSelect={(mood) => handleEmotionSelect(mood)} />\n\n            {/* Continue Button */}\n            <motion.div\n              className=\"mt-8 w-full max-w-md\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3 }}\n            >\n              <Button\n                className=\"w-full bg-indigo-500 hover:bg-indigo-600 text-white py-3 rounded-xl text-base\"\n                onClick={() => setShowEmotionSelection(false)}\n              >\n                Continue to Meditation\n              </Button>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Hug Animation */}\n      <AnimatePresence>\n        {showHugAnimation && (\n          <motion.div\n            className=\"absolute inset-0 pointer-events-none flex items-center justify-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <motion.div\n              className=\"w-64 h-64 rounded-full bg-white/10 backdrop-blur-sm flex items-center justify-center\"\n              animate={{\n                scale: [1, 1.2, 1],\n                boxShadow: [\n                  '0 0 0 0 rgba(255, 255, 255, 0.3)',\n                  '0 0 0 20px rgba(255, 255, 255, 0.2)',\n                  '0 0 0 40px rgba(255, 255, 255, 0.1)',\n                  '0 0 0 0 rgba(255, 255, 255, 0)'\n                ]\n              }}\n              transition={{ duration: 3, ease: \"easeInOut\" }}\n            >\n              <Heart size={48} className=\"text-white/70\" />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Simplified Header - removed to match screenshot */}\n\n      {/* Back Button */}\n      <div className=\"absolute top-4 left-4 z-30\">\n        <button\n          onClick={onClose}\n          className=\"bg-white/20 backdrop-blur-sm p-2 rounded-full hover:bg-white/30 transition-colors\"\n        >\n          <ArrowLeft size={24} className=\"text-white\" />\n        </button>\n      </div>\n\n      {/* Bear Mascot - optimized for mobile */}\n      <AnimatePresence>\n        {showBearMascot && (\n          <div className=\"absolute top-16 md:top-20 right-2 md:right-4 z-20 max-w-[120px] md:max-w-[160px]\">\n            <BearMascot\n              emotion={bearEmotion}\n              message={bearMessage}\n              onAnimationComplete={() => {\n                // Optional: Hide bear after some time\n                // setTimeout(() => setShowBearMascot(false), 5000);\n              }}\n            />\n          </div>\n        )}\n      </AnimatePresence>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 bg-transparent relative z-10\">\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <AnimatePresence>\n            {messages.map((message) => (\n              <motion.div\n                key={message.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.3 }}\n                className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[85%] rounded-2xl p-3 relative ${\n                    message.sender === 'user'\n                      ? 'bg-indigo-500 text-white rounded-tr-none'\n                      : message.type === 'breathing'\n                        ? 'bg-indigo-400/30 backdrop-blur-sm text-white rounded-tl-none'\n                        : 'bg-white/10 backdrop-blur-sm text-white rounded-tl-none'\n                  }`}\n                >\n                  {/* Hug bubble animation for AI messages */}\n                  {message.sender === 'ai' && message.showHugAnimation && (\n                    <motion.div\n                      className=\"absolute -inset-2 rounded-full pointer-events-none\"\n                      animate={{\n                        boxShadow: [\n                          '0 0 0 0 rgba(255, 255, 255, 0)',\n                          '0 0 0 4px rgba(255, 255, 255, 0.2)',\n                          '0 0 0 8px rgba(255, 255, 255, 0.1)',\n                          '0 0 0 0 rgba(255, 255, 255, 0)'\n                        ]\n                      }}\n                      transition={{ duration: 2, ease: \"easeInOut\", repeat: 1 }}\n                    />\n                  )}\n\n                  {message.type === 'breathing' ? (\n                    <motion.div\n                      className=\"flex items-center justify-center py-2\"\n                      animate={{\n                        scale: message.breathingCue === 'inhale' ? [1, 1.2] :\n                               message.breathingCue === 'hold' ? 1.2 :\n                               message.breathingCue === 'exhale' ? [1.2, 1] : 1\n                      }}\n                      transition={{\n                        duration: message.duration || 4,\n                        ease: \"easeInOut\"\n                      }}\n                    >\n                      <p className=\"text-lg font-light\">{message.content}</p>\n                    </motion.div>\n                  ) : (\n                    <p className=\"text-sm whitespace-pre-line\">\n                      {message.content.split(/(\\[pause\\]|\\[breathe in\\]|\\[breathe out\\])/).map((part, i) => {\n                        if (part === '[pause]') {\n                          return <span key={i} className=\"text-white/50\">...</span>;\n                        } else if (part === '[breathe in]') {\n                          return <span key={i} className=\"text-white/70 font-light italic\">breathe in...</span>;\n                        } else if (part === '[breathe out]') {\n                          return <span key={i} className=\"text-white/70 font-light italic\">breathe out...</span>;\n                        } else {\n                          return <span key={i}>{part}</span>;\n                        }\n                      })}\n                    </p>\n                  )}\n\n                  {/* Suggestions */}\n                  {message.sender === 'ai' && message.suggestions && message.suggestions.length > 0 && (\n                    <div className=\"mt-2 space-y-2\">\n                      {message.suggestions.map((suggestion, index) => (\n                        <button\n                          key={index}\n                          onClick={() => handleSuggestionClick(suggestion)}\n                          className=\"block w-full text-left text-sm bg-white/10 hover:bg-white/20 rounded-xl p-3 transition-colors text-white\"\n                        >\n                          {suggestion}\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            ))}\n\n            {/* Typing indicator */}\n            {isTyping && (\n              <motion.div\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"flex justify-start\"\n              >\n                <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl rounded-tl-none p-3\">\n                  <div className=\"flex space-x-1\">\n                    <div className=\"w-2 h-2 bg-white/50 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                    <div className=\"w-2 h-2 bg-white/50 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                    <div className=\"w-2 h-2 bg-white/50 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <div ref={messagesEndRef} />\n        </div>\n      </div>\n\n      {/* Meditation Controls with Breathing Light */}\n      {isMeditating && (\n        <div className=\"bg-indigo-800/50 backdrop-blur-sm p-4 flex justify-center items-center relative z-10\">\n          <div className=\"flex space-x-4 items-center\">\n            <Button\n              onClick={handleEndMeditation}\n              className=\"bg-white/10 hover:bg-white/20 text-white rounded-full px-4 py-2\"\n            >\n              End Meditation\n            </Button>\n\n            {/* Breathing visualization with glow */}\n            <div className=\"relative\">\n              <motion.div\n                animate={{\n                  scale: currentBreathPhase === 'inhale' ? [1, 1.5] :\n                         currentBreathPhase === 'hold' ? 1.5 :\n                         currentBreathPhase === 'exhale' ? [1.5, 1] : 1,\n                  boxShadow: currentBreathPhase === 'inhale' ? [\n                    '0 0 0 0 rgba(255, 255, 255, 0.3)',\n                    '0 0 20px 10px rgba(255, 255, 255, 0.5)'\n                  ] : currentBreathPhase === 'hold' ?\n                    '0 0 20px 10px rgba(255, 255, 255, 0.5)' :\n                    currentBreathPhase === 'exhale' ? [\n                      '0 0 20px 10px rgba(255, 255, 255, 0.5)',\n                      '0 0 0 0 rgba(255, 255, 255, 0.3)'\n                    ] : '0 0 0 0 rgba(255, 255, 255, 0.3)'\n                }}\n                transition={{\n                  duration: currentBreathPhase === 'inhale' ? 4 :\n                           currentBreathPhase === 'hold' ? 4 :\n                           currentBreathPhase === 'exhale' ? 6 : 1,\n                  ease: \"easeInOut\"\n                }}\n                className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\"\n              >\n                <Wind size={20} className=\"text-white\" />\n              </motion.div>\n            </div>\n\n            <div className=\"text-white text-sm\">\n              {currentBreathPhase === 'inhale' ? 'Breathe In' :\n               currentBreathPhase === 'hold' ? 'Hold' :\n               currentBreathPhase === 'exhale' ? 'Breathe Out' : 'Rest'}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Input */}\n      {!isMeditating && (\n        <div className=\"p-4 border-t border-white/10 bg-transparent relative z-10\">\n          <div className=\"max-w-md mx-auto flex\">\n            <button\n              onClick={handleVoiceInput}\n              className={`${isListening ? 'bg-red-500' : 'bg-indigo-500'} hover:opacity-90 text-white rounded-l-full px-4 py-2`}\n            >\n              {isListening ? <MicOff size={18} /> : <Mic size={18} />}\n            </button>\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n              placeholder=\"Tell me how you're feeling...\"\n              className=\"flex-1 border border-white/20 bg-white/10 text-white placeholder-white/50 px-4 py-2 focus:outline-none focus:ring-2 focus:ring-white/30\"\n            />\n            <button\n              onClick={handleSendMessage}\n              className=\"bg-indigo-500 hover:bg-indigo-600 text-white rounded-r-full px-4 py-2\"\n            >\n              <Send size={18} />\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Reflection Card */}\n      <AnimatePresence>\n        {showReflectionCard && (\n          <motion.div\n            className=\"fixed inset-0 z-50 bg-black/50 flex items-center justify-center p-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            <motion.div\n              className=\"bg-gradient-to-br from-indigo-700 to-purple-800 rounded-xl p-5 w-full max-w-md\"\n              initial={{ scale: 0.9, y: 20 }}\n              animate={{ scale: 1, y: 0 }}\n              exit={{ scale: 0.9, y: 20 }}\n              transition={{ type: \"spring\", bounce: 0.3 }}\n            >\n              <div className=\"flex justify-between items-start mb-4\">\n                <h3 className=\"text-xl font-semibold text-white flex items-center\">\n                  <PenTool size={18} className=\"mr-2\" />\n                  Save Your Reflection\n                </h3>\n                <button\n                  onClick={() => setShowReflectionCard(false)}\n                  className=\"text-white/70 hover:text-white\"\n                >\n                  <X size={18} />\n                </button>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <motion.p\n                    className=\"text-white/90 text-sm mb-2\"\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ delay: 0.2 }}\n                  >\n                    Write your thoughts about today's meditation:\n                  </motion.p>\n                  <motion.textarea\n                    value={reflectionText}\n                    onChange={(e) => setReflectionText(e.target.value)}\n                    placeholder=\"Today, I felt...\"\n                    className=\"w-full h-32 bg-white/10 border border-white/20 rounded-lg p-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/30 resize-none\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.3 }}\n                  />\n                </div>\n\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={() => setShowReflectionCard(false)}\n                    className=\"flex-1 bg-white/10 hover:bg-white/20 text-white\"\n                  >\n                    Skip\n                  </Button>\n                  <Button\n                    onClick={handleSaveReflection}\n                    className=\"flex-1 bg-indigo-500 hover:bg-indigo-600 text-white\"\n                  >\n                    Save Reflection\n                  </Button>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Schedule Modal */}\n      {showScheduleModal && (\n        <ScheduleModal\n          isOpen={showScheduleModal}\n          onClose={() => setShowScheduleModal(false)}\n          meditationTitle={meditationTitle}\n          meditationDuration={meditationDuration}\n          onScheduled={handleScheduleComplete}\n        />\n      )}\n    </div>\n  );\n};\n\n// Add these interfaces to make TypeScript happy with the SpeechRecognition API\ndeclare global {\n  interface Window {\n    webkitSpeechRecognition: any;\n    SpeechRecognition: any;\n  }\n}\n\nexport default MeditationChat;\n"],"names":["MicOff","createLucideIcon","Mic","PenTool","Wind","ScheduleModal","isOpen","onClose","meditationTitle","meditationDuration","onScheduled","toast","useToast","selectedDate","setSelectedDate","useState","Date","selectedTime","setSelectedTime","remindMe","setRemindMe","addToCalendar","setAddToCalendar","isSubmitting","setIsSubmitting","hasNotificationPermission","setHasNotificationPermission","timeSlots","slots","now","currentHour","getHours","currentMinute","getMinutes","isToday","toDateString","startHour","hour","isPM","hour12","startMinute","Math","ceil","minute","formattedMinute","toString","padStart","timeString","push","useEffect","setMinutes","period","window","Notification","permission","handleDateChange","e","target","value","handleTimeSelection","time","requestNotificationPermission","requestPermission","title","description","addToGoogleCalendar","timeStr","split","hourStr","minuteStr","parseInt","startDate","setHours","durationMinutes","endDate","formatDate","date","toISOString","replace","startDateStr","endDateStr","url","encodeURIComponent","Intl","DateTimeFormat","resolvedOptions","timeZone","open","handleSchedule","scheduledDate","formattedDate","toLocaleDateString","weekday","month","day","formattedTime","toLocaleTimeString","sessionId","savedSessions","localStorage","getItem","sessions","JSON","parse","id","duration","timestamp","getTime","completed","setItem","stringify","reminderService","error","AnimatePresence","motion","div","initial","opacity","animate","exit","className","onClick","scale","stopPropagation","h2","button","X","size","h3","p","label","CalendarIcon","input","type","min","onChange","map","Bell","span","Calendar","Button","variant","disabled","_jsxs","Check","meditationQuestions","text","category","emoji","getRandomQuestion","randomIndex","floor","random","length","MeditationChat","user","useAuth","messages","setMessages","inputValue","setInputValue","isTyping","setIsTyping","isListening","setIsListening","isMeditating","setIsMeditating","currentBreathPhase","setCurrentBreathPhase","showScheduleModal","setShowScheduleModal","showReflectionCard","setShowReflectionCard","reflectionText","setReflectionText","setMeditationTitle","setMeditationDuration","currentEmotion","setCurrentEmotion","showHugAnimation","setShowHugAnimation","messagesEndRef","useRef","showBearMascot","setShowBearMascot","bearEmotion","setBearEmotion","bearMessage","setBearMessage","welcomeQuestion","setWelcomeQuestion","setTimeout","welcomeMessage","generateId","content","sender","suggestions","emotion","current","scrollIntoView","behavior","breathTimer","runBreathCycle","addBreathingCue","substring","phase","breathingContent","cueMessage","breathingCue","prev","handleSendMessage","trim","userMessage","aiResponse","generateAIResponse","handleVoiceInput","SpeechRecognition","webkitSpeechRecognition","stop","recognition","lang","continuous","interimResults","onresult","event","transcript","results","onerror","onend","start","handleSuggestionClick","suggestion","lowerMessage","toLowerCase","responseContent","messageType","showHug","detectEmotion","includes","message","handleEndMeditation","completionMessage","handleScheduleComplete","scheduledTime","schedulingMessage","handleSaveReflection","reflectionMessage","getEmotionBackground","getEmotionAnimations","_jsx","transition","repeat","Infinity","ease","backgroundColor","Array","_","i","style","left","top","rotate","delay","x","bottom","y","handleEmotionSelect","mood","showEmotionSelection","setShowEmotionSelection","ArrowLeft","MoodSelector","onSelect","boxShadow","Heart","BearMascot","onAnimationComplete","part","index","animationDelay","ref","onKeyPress","key","placeholder","Send","bounce","textarea"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}