{"version":3,"file":"useActivityTracking-CiBricn8.js","sources":["../../src/hooks/useActivityTracking.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { activityTrackingService } from '../services/activityTrackingService';\r\nimport { useAuth } from './useAuth';\r\n\r\nexport const useActivityTracking = () => {\r\n  const { user } = useAuth();\r\n  const location = useLocation();\r\n  const userId = user?.id || 'guest';\r\n  const isInitialMount = useRef(true);\r\n  \r\n  // Start session when component mounts\r\n  useEffect(() => {\r\n    if (isInitialMount.current) {\r\n      activityTrackingService.startSession(userId);\r\n      isInitialMount.current = false;\r\n      \r\n      // Set up event listener for when user leaves the page\r\n      const handleBeforeUnload = () => {\r\n        activityTrackingService.endSession(userId);\r\n      };\r\n      \r\n      window.addEventListener('beforeunload', handleBeforeUnload);\r\n      \r\n      return () => {\r\n        window.removeEventListener('beforeunload', handleBeforeUnload);\r\n        activityTrackingService.endSession(userId);\r\n      };\r\n    }\r\n  }, [userId]);\r\n  \r\n  // Track page visits\r\n  useEffect(() => {\r\n    // Get page title based on route\r\n    let pageTitle = 'Unknown Page';\r\n    \r\n    switch (location.pathname) {\r\n      case '/':\r\n      case '/splash':\r\n        pageTitle = 'Splash Screen';\r\n        break;\r\n      case '/home':\r\n        pageTitle = 'Home';\r\n        break;\r\n      case '/meditation':\r\n        pageTitle = 'Meditation';\r\n        break;\r\n      case '/meditation-101':\r\n        pageTitle = 'Meditation 101';\r\n        break;\r\n      case '/sleep-stories':\r\n        pageTitle = 'Sleep Stories';\r\n        break;\r\n      case '/work':\r\n        pageTitle = 'Your Guided Day';\r\n        break;\r\n      case '/community':\r\n        pageTitle = 'Community';\r\n        break;\r\n      case '/profile':\r\n        pageTitle = 'Profile';\r\n        break;\r\n      default:\r\n        // Try to extract page name from path\r\n        const pathSegments = location.pathname.split('/').filter(Boolean);\r\n        if (pathSegments.length > 0) {\r\n          pageTitle = pathSegments[pathSegments.length - 1]\r\n            .split('-')\r\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\r\n            .join(' ');\r\n        }\r\n    }\r\n    \r\n    activityTrackingService.trackPageVisit(userId, location.pathname, pageTitle);\r\n  }, [location.pathname, userId]);\r\n  \r\n  // Return methods for tracking meditation sessions\r\n  return {\r\n    startMeditationSession: (sessionId: string, title: string) => \r\n      activityTrackingService.startMeditationSession(userId, sessionId, title),\r\n    \r\n    endMeditationSession: (sessionId: string, completed: boolean = true) => \r\n      activityTrackingService.endMeditationSession(userId, sessionId, completed),\r\n    \r\n    getActivitySummary: () => \r\n      activityTrackingService.getActivitySummary(userId),\r\n    \r\n    getFormattedActivitySummary: () => \r\n      activityTrackingService.getFormattedActivitySummary(userId),\r\n    \r\n    getRecentPageVisits: (limit?: number) => \r\n      activityTrackingService.getRecentPageVisits(userId, limit),\r\n    \r\n    getMeditationSessions: (limit?: number) => \r\n      activityTrackingService.getMeditationSessions(userId, limit)\r\n  };\r\n};\r\n"],"names":["useActivityTracking","user","useAuth","location","useLocation","userId","id","isInitialMount","useRef","useEffect","current","activityTrackingService","startSession","handleBeforeUnload","endSession","addEventListener","removeEventListener","pageTitle","pathname","pathSegments","split","filter","Boolean","length","map","word","charAt","toUpperCase","slice","join","trackPageVisit","startMeditationSession","sessionId","title","endMeditationSession","completed","getActivitySummary","getFormattedActivitySummary","getRecentPageVisits","limit","getMeditationSessions"],"mappings":"2GAKO,MAAMA,EAAsB,IAAA,CAC3B,KAAA,CAAEC,KAAAA,GAASC,IACXC,EAAWC,IACXC,GAASJ,GAAAA,YAAAA,EAAMK,KAAM,QACrBC,EAAiBC,SAAO,EAAA,EAG9BC,OAAAA,EAAAA,UAAU,IAAA,CACR,GAAIF,EAAeG,QAAS,CAC1BC,EAAwBC,aAAaP,CAAAA,EACrCE,EAAeG,QAAU,GAGzB,MAAMG,EAAqB,IAAA,CACzBF,EAAwBG,WAAWT,CAAAA,CAAAA,EAG9BU,cAAAA,iBAAiB,eAAgBF,CAAAA,EAEjC,IAAA,CACEG,OAAAA,oBAAoB,eAAgBH,CAAAA,EAC3CF,EAAwBG,WAAWT,CAAAA,CAAAA,CAEvC,CAAA,EACC,CAACA,CAAAA,CAAO,EAGXI,EAAAA,UAAU,IAAA,CAER,IAAIQ,EAAY,eAEhB,OAAQd,EAASe,SAAQ,CACvB,IAAK,IACL,IAAK,UACSD,EAAA,gBACZ,MACF,IAAK,QACSA,EAAA,OACZ,MACF,IAAK,cACSA,EAAA,aACZ,MACF,IAAK,kBACSA,EAAA,iBACZ,MACF,IAAK,iBACSA,EAAA,gBACZ,MACF,IAAK,QACSA,EAAA,kBACZ,MACF,IAAK,aACSA,EAAA,YACZ,MACF,IAAK,WACSA,EAAA,UACZ,MACF,QAEE,MAAME,EAAehB,EAASe,SAASE,MAAM,GAAA,EAAKC,OAAOC,OAAAA,EACrDH,EAAaI,OAAS,IACZJ,EAAAA,EAAaA,EAAaI,OAAS,GAC5CH,MAAM,GAAA,EACNI,IAAIC,GAAQA,EAAKC,OAAO,CAAGC,EAAAA,YAAAA,EAAgBF,EAAKG,MAAM,CACtDC,CAAAA,EAAAA,KAAK,GAAA,EAEd,CAEAlB,EAAwBmB,eAAezB,EAAQF,EAASe,SAAUD,CAAAA,CAAAA,EACjE,CAACd,EAASe,SAAUb,CAAAA,CAAO,EAGvB,CACL0B,uBAAwB,CAACC,EAAmBC,IAC1CtB,EAAwBoB,uBAAuB1B,EAAQ2B,EAAWC,CAAAA,EAEpEC,qBAAsB,CAACF,EAAmBG,EAAqB,KAC7DxB,EAAwBuB,qBAAqB7B,EAAQ2B,EAAWG,CAAAA,EAElEC,mBAAoB,IAClBzB,EAAwByB,mBAAmB/B,CAAAA,EAE7CgC,4BAA6B,IAC3B1B,EAAwB0B,4BAA4BhC,CAAAA,EAEtDiC,oBAAsBC,GACpB5B,EAAwB2B,oBAAoBjC,EAAQkC,CAAAA,EAEtDC,sBAAwBD,GACtB5B,EAAwB6B,sBAAsBnC,EAAQkC,CAAAA,CAAAA,CAE5D"}